<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VsCode 使用 php cs fixer 插件高效格式化代码]]></title>
    <url>%2F2019-08-16-vscode-with-php-cs-fixer.html</url>
    <content type="text"><![CDATA[下载相关 phar 文件 打开https://github.com/FriendsOfPHP/PHP-CS-Fixer , 下载 php-cs-fixer.phar 文件 安装 php cs fixer 扩展 编写自定义配置文件 .php_cs 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;?phpreturn PhpCsFixer\Config::create() -&gt;setRules(array( '@PSR2' =&gt; true, 'array_indentation' =&gt; true, 'array_syntax' =&gt; array('syntax' =&gt; 'short'), 'combine_consecutive_unsets' =&gt; true, 'method_separation' =&gt; true, 'no_multiline_whitespace_before_semicolons' =&gt; true, 'single_quote' =&gt; true, 'binary_operator_spaces' =&gt; array( 'align_double_arrow' =&gt; false, 'align_equals' =&gt; false, ), // 'blank_line_after_opening_tag' =&gt; true, // 'blank_line_before_return' =&gt; true, 'braces' =&gt; array( 'allow_single_line_closure' =&gt; true, ), // 'cast_spaces' =&gt; true, // 'class_definition' =&gt; array('singleLine' =&gt; true), 'concat_space' =&gt; array('spacing' =&gt; 'one'), 'declare_equal_normalize' =&gt; true, 'function_typehint_space' =&gt; true, 'hash_to_slash_comment' =&gt; true, 'include' =&gt; true, 'lowercase_cast' =&gt; true, // 'native_function_casing' =&gt; true, // 'new_with_braces' =&gt; true, // 'no_blank_lines_after_class_opening' =&gt; true, // 'no_blank_lines_after_phpdoc' =&gt; true, // 'no_empty_comment' =&gt; true, // 'no_empty_phpdoc' =&gt; true, // 'no_empty_statement' =&gt; true, 'no_extra_consecutive_blank_lines' =&gt; array( 'curly_brace_block', 'extra', 'parenthesis_brace_block', 'square_brace_block', 'throw', 'use', ), // 'no_leading_import_slash' =&gt; true, // 'no_leading_namespace_whitespace' =&gt; true, // 'no_mixed_echo_print' =&gt; array('use' =&gt; 'echo'), 'no_multiline_whitespace_around_double_arrow' =&gt; true, // 'no_short_bool_cast' =&gt; true, // 'no_singleline_whitespace_before_semicolons' =&gt; true, 'no_spaces_around_offset' =&gt; true, // 'no_trailing_comma_in_list_call' =&gt; true, // 'no_trailing_comma_in_singleline_array' =&gt; true, // 'no_unneeded_control_parentheses' =&gt; true, 'no_unused_imports' =&gt; true, 'no_whitespace_before_comma_in_array' =&gt; true, 'no_whitespace_in_blank_line' =&gt; true, // 'normalize_index_brace' =&gt; true, 'object_operator_without_whitespace' =&gt; true, // 'php_unit_fqcn_annotation' =&gt; true, // 'phpdoc_align' =&gt; true, // 'phpdoc_annotation_without_dot' =&gt; true, // 'phpdoc_indent' =&gt; true, // 'phpdoc_inline_tag' =&gt; true, // 'phpdoc_no_access' =&gt; true, // 'phpdoc_no_alias_tag' =&gt; true, // 'phpdoc_no_empty_return' =&gt; true, // 'phpdoc_no_package' =&gt; true, // 'phpdoc_no_useless_inheritdoc' =&gt; true, // 'phpdoc_return_self_reference' =&gt; true, // 'phpdoc_scalar' =&gt; true, // 'phpdoc_separation' =&gt; true, // 'phpdoc_single_line_var_spacing' =&gt; true, // 'phpdoc_summary' =&gt; true, // 'phpdoc_to_comment' =&gt; true, // 'phpdoc_trim' =&gt; true, // 'phpdoc_types' =&gt; true, // 'phpdoc_var_without_name' =&gt; true, // 'pre_increment' =&gt; true, // 'return_type_declaration' =&gt; true, // 'self_accessor' =&gt; true, // 'short_scalar_cast' =&gt; true, 'single_blank_line_before_namespace' =&gt; true, // 'single_class_element_per_statement' =&gt; true, // 'space_after_semicolon' =&gt; true, // 'standardize_not_equals' =&gt; true, 'ternary_operator_spaces' =&gt; true, // 'trailing_comma_in_multiline_array' =&gt; true, 'trim_array_spaces' =&gt; true, 'unary_operator_spaces' =&gt; true, 'whitespace_after_comma_in_array' =&gt; true, )) //-&gt;setIndent("\t") -&gt;setLineEnding("\n"); 扩展配置 1234567891011&#123; // 自定义配置文件所在位置 "php-cs-fixer.config": "C:/Users/admin/.vscode/.php_cs", "[php]": &#123; "editor.defaultFormatter": "junstyle.php-cs-fixer" &#125;, // 保存时自动格式化 "php-cs-fixer.onsave": true, // 第一步下载的 phar 文件所在位置 "php-cs-fixer.executablePathWindows": "D:/Softs/php-7.3.8-nts-Win32-VC15-x64/php-cs-fixer-v2.phar"&#125;]]></content>
      <categories>
        <category>开发利器</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>PHP-CS-Fixer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot学习之整合Mybatis Generator]]></title>
    <url>%2F2019-08-08-SpringBoot-Mybatis-Generator.html</url>
    <content type="text"><![CDATA[pom.xml 文件配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;mysql.version&gt;6.0.6&lt;/mysql.version&gt; &lt;mybatis.version&gt;1.3.4&lt;/mybatis.version&gt; &lt;lombok.version&gt;1.18.6&lt;/lombok.version&gt; &lt;mybatis.generator.version&gt;1.3.5&lt;/mybatis.generator.version&gt; &lt;alibaba.druid.version&gt;1.1.18&lt;/alibaba.druid.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--数据库相关 BEGIN--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--Mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;alibaba.druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据库相关 END--&gt; &lt;!--工具类 BEGIN--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--工具类 END--&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.generator.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;configurationFile&gt; $&#123;basedir&#125;/src/main/resources/generatorConfig.xml &lt;/configurationFile&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;/configuration&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; generatorConfig.xml 配置123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfigurationPUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN""http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;properties resource="application-dev.properties"/&gt; &lt;context id="Mysql" targetRuntime="MyBatis3"&gt; &lt;plugin type="org.mybatis.generator.plugins.SerializablePlugin" /&gt; &lt;commentGenerator&gt; &lt;property name="suppressDate" value="true"/&gt; &lt;property name="suppressAllComments" value="true"/&gt; &lt;/commentGenerator&gt; &lt;jdbcConnection driverClass="$&#123;spring.datasource.driver-class-name&#125;" connectionURL="$&#123;spring.datasource.url&#125;" userId="$&#123;spring.datasource.username&#125;" password="$&#123;spring.datasource.password&#125;"&gt; &lt;!--设置可以获取tables remarks信息--&gt; &lt;property name="useInformationSchema" value="true"/&gt; &lt;!--设置可以获取remarks信息--&gt; &lt;property name="remarks" value="true"/&gt; &lt;/jdbcConnection&gt; &lt;javaModelGenerator targetPackage="com.examle.demo.pojo" targetProject="src/main/java"/&gt; &lt;sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/&gt; &lt;javaClientGenerator targetPackage="com.example.demo.dao" targetProject="src/main/java" type="XMLMAPPER"/&gt; &lt;table tableName="demo_cart" domainObjectName="Cart" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt; &lt;generatedKey column="id" sqlStatement="Mysql" identity="true" /&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; application-dev.properties 配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253spring.application.name=demoserver.port=8088# 数据库配置spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8spring.datasource.username=rootspring.datasource.password=spring.datasource.type=com.alibaba.druid.pool.DruidDataSource# 连接池配置#连接池的设置#初始化时建立物理连接的个数spring.datasource.druid.initial-size=5#最小连接池数量spring.datasource.druid.min-idle=5#最大连接池数量 maxIdle已经不再使用spring.datasource.druid.max-active=20#获取连接时最大等待时间，单位毫秒spring.datasource.druid.max-wait=60000#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。spring.datasource.druid.test-while-idle=true#既作为检测的间隔时间又作为testWhileIdel执行的依据spring.datasource.druid.time-between-eviction-runs-millis=60000#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接spring.datasource.druid.min-evictable-idle-time-millis=30000#用来检测连接是否有效的sql 必须是一个查询语句#mysql中为 select &apos;x&apos;#oracle中为 select 1 from dualspring.datasource.druid.validation-query=select &apos;x&apos;#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为truespring.datasource.druid.test-on-borrow=false#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为truespring.datasource.druid.test-on-return=false#当数据库抛出不可恢复的异常时,抛弃该连接spring.datasource.druid.exception-sorter=true#是否缓存preparedStatement,mysql5.5+建议开启#spring.datasource.druid.pool-prepared-statements=true#当值大于0时poolPreparedStatements会自动修改为truespring.datasource.druid.max-pool-prepared-statement-per-connection-size=20#配置扩展插件spring.datasource.druid.filters=stat,wall#通过connectProperties属性来打开mergeSql功能；慢SQL记录spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500#合并多个DruidDataSource的监控数据spring.datasource.druid.use-global-data-source-stat=true#设置访问druid监控页的账号和密码,默认没有#spring.datasource.druid.stat-view-servlet.login-username=admin#spring.datasource.druid.stat-view-servlet.login-password=admin#mybatismybatis.mapper-locations=classpath:mapper/*.xmlmybatis.type-aliases-package=com.example.demo.pojo 文件配置已全部完成，执行 mybatis-generator:generate 即可]]></content>
      <categories>
        <category>SpringBoot学习之旅</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis Generator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之任务UI更新]]></title>
    <url>%2F2019-07-20-build-a-laravel-app-with-tdd-13.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 任务添加权限测试 1234567891011121314151617/** @test */public function guests_cannot_add_tasks_to_project()&#123; $project = factory(Project::class)-&gt;create(); $this-&gt;post($project-&gt;path() . '/tasks')-&gt;assertRedirect('login');&#125;/** @test */public function only_the_owner_of_a_project_may_add_tasks()&#123; $this-&gt;signIn(); $project = factory(Project::class)-&gt;create(); $this-&gt;post($project-&gt;path() . '/tasks', ['body' =&gt; 'Test task'])-&gt;assertStatus(403); $this-&gt;assertDatabaseMissing('tasks', ['body' =&gt; 'Test task']);&#125; 测试结果： Tests\Feature\ProjectTasksTest::only_the_owner_of_a_project_may_add_tasksExpected status code 403 but received 302.Failed asserting that false is true. 在控制器中增加权限控制： 12345678910public function store(Project $project)&#123; if (auth()-&gt;user()-&gt;isNot($project-&gt;owner)) &#123; abort(403); &#125; request()-&gt;validate(['body'=&gt; 'required']); $project-&gt;addTask(request('body')); return redirect($project-&gt;path());&#125; 测试通过！]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始Go之循环语句]]></title>
    <url>%2F2019-07-19-Go_From_Scratch_5.html</url>
    <content type="text"><![CDATA[Go 语言中的 for 循环结构如下： 1234sum := 0for i:= 1; i &lt; 100; i++ &#123; sum += i&#125; 示例 十进制转二进制]]></content>
      <categories>
        <category>从零开始Go</category>
      </categories>
      <tags>
        <tag>从零开始Go</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始Go之条件语句]]></title>
    <url>%2F2019-07-19-Go_From_Scratch_4.html</url>
    <content type="text"><![CDATA[If 示例：文件读取 12345678910111213141516package mainimport ( "fmt" "io/ioutil")func main() &#123; const filename = "abc.txt" contents, err := ioutil.ReadFile(filename) if err != nil &#123; fmt.Println(err) &#125; else &#123; fmt.Printf("%s\n", contents) &#125;&#125; 首先，Go语言中是可以拥有多个返回值的。其次，if 条件语句没有用 () 包裹 程序优化写法 123456789101112131415package mainimport ( "fmt" "io/ioutil")func main() &#123; const filename = "abc.txt" if contents, err := ioutil.ReadFile(filename); err != nil &#123; fmt.Println(err) &#125; else &#123; fmt.Printf("%s\n", contents) &#125;&#125; switchswitch 中没有 break，程序自动 break，使用 fallthrough 取消自动 break 示例：成绩判断 1234567891011121314151617181920212223242526272829package mainimport "fmt"func grade(score int) string &#123; g := "" switch &#123; case score &lt; 0 || score &gt; 100: panic("分数异常") case score &lt; 60: g = "F" case score &lt; 80: g = "C" case score &lt; 90: g = "B" case score &lt;= 100: g = "A" &#125; return g&#125;func main() &#123; fmt.Println(grade(10), grade(70), grade(85), grade(100), )&#125; 触发 panic 会中止程序执行]]></content>
      <categories>
        <category>从零开始Go</category>
      </categories>
      <tags>
        <tag>从零开始Go</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之项目任务]]></title>
    <url>%2F2019-07-18-build-a-laravel-app-with-tdd-12.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 任务测试 提取登录方法： 之前在项目功能测试中许多地方都使用到了： 123$this-&gt;actingAs(factory('App\User')-&gt;create());# 或者$this-&gt;be(factory('App\User')-&gt;create()); 来表示登录用户，在任务测试中还将继续使用。所以我们可以提取这个方法，在 TestCase.php 中写入如下： 12345678910...abstract class TestCase extends BaseTestCase&#123; use CreatesApplication; protected function signIn($user = null) &#123; return $this-&gt;actingAs($user ?: factory('App\User')-&gt;create()); &#125;&#125; 替换 ManageProjectsTest.php 中对应的方法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;?phpnamespace Tests\Feature;use Tests\TestCase;use Illuminate\Foundation\Testing\WithFaker;use Illuminate\Foundation\Testing\RefreshDatabase;class ManageProjectsTest extends TestCase&#123; use WithFaker, RefreshDatabase; //生成假数据, 每次测试后重置数据库 /** @test */ public function guests_cannot_manage_projects() &#123; $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects')-&gt;assertRedirect('login'); $this-&gt;get('/projects/create')-&gt;assertRedirect('login'); $this-&gt;get($project-&gt;path())-&gt;assertRedirect('login'); $this-&gt;post('/projects', $project-&gt;toArray())-&gt;assertRedirect('login'); &#125; /** @test */ public function a_user_can_create_a_project() &#123; $this-&gt;withoutExceptionHandling(); $this-&gt;signIn(); $this-&gt;get('/projects/create')-&gt;assertStatus(200); $attributes = [ 'title' =&gt; $this-&gt;faker-&gt;sentence, 'description' =&gt; $this-&gt;faker-&gt;paragraph ]; $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('/projects'); // 断言数据库中的数据是否和给定数据集合匹配 $this-&gt;assertDatabaseHas('projects', $attributes); $this-&gt;get('/projects')-&gt;assertSee($attributes['title']); &#125; /** @test */ public function a_user_can_view_their_project() &#123; $this-&gt;signIn(); $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(['owner_id'=&gt; auth()-&gt;id()]); $this-&gt;get($project-&gt;path()) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description); &#125; /** @test */ public function an_authenticated_user_cannot_view_the_projects_of_others() &#123; $this-&gt;signIn(); $project = factory('App\Project')-&gt;create(); $this-&gt;get($project-&gt;path())-&gt;assertStatus(403); &#125; /** @test */ public function a_project_requires_title() &#123; $this-&gt;signIn(); $attributes = factory('App\Project')-&gt;raw(['title' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('title'); &#125; /** @test */ public function a_project_requires_description() &#123; $this-&gt;signIn(); $attributes = factory('App\Project')-&gt;raw(['description' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('description'); &#125;&#125; 运行测试成功！ 一个项目拥有 N 个任务。测试先行： 1make:test ProjectTasksTest 123456789101112131415161718192021222324252627&lt;?phpnamespace Tests\Feature;use App\Project;use Tests\TestCase;use Illuminate\Foundation\Testing\WithFaker;use Illuminate\Foundation\Testing\RefreshDatabase;class ProjectTasksTest extends TestCase&#123; use RefreshDatabase; /** @test */ public function a_project_can_have_tasks() &#123; $this-&gt;withoutExceptionHandling(); $this-&gt;signIn(); $project = factory(Project::class)-&gt;create(['owner_id' =&gt; auth()-&gt;id()]); $this-&gt;post($project-&gt;path() .'/tasks', ['body' =&gt; 'Test task']); $this-&gt;get($project-&gt;path())-&gt;assertSee('Test task'); &#125;&#125; 测试运行得出错误： 121) Tests\Feature\ProjectTasksTest::a_project_can_have_tasksSymfony\Component\HttpKernel\Exception\NotFoundHttpException: POST http://birdboard.test/projects/1/tasks 找不到路由，增加路由： 123...Route::post('/projects', 'ProjectsController@store');Route::post('/projects/&#123;project&#125;/tasks', 'ProjectTasksController@store'); 运行测试结果如下： 1) Tests\Feature\ProjectTasksTest::a_project_can_have_tasksReflectionException: Class App\Http\Controllers\ProjectTasksController does not exist 生成控制器补全方法： 123456789101112131415&lt;?phpnamespace App\Http\Controllers;use App\Project;class ProjectTasksController extends Controller&#123; public function store(Project $project) &#123; $project-&gt;addTask(request('body')); return redirect($project-&gt;path()); &#125;&#125; 运行测试结果如下： 1) Tests\Feature\ProjectTasksTest::a_project_can_have_tasksBadMethodCallException: Call to undefined method App\Project::addTask() 在单元测试 ProjectTest 中写一个关于 addTask 的测试： 123456789/** @test */public function it_can_add_a_task()&#123; $project = factory('App\Project')-&gt;create(); $project-&gt;addTask('Test task'); $this-&gt;assertCount(1, $project-&gt;tasks);&#125; 运行测试结果如下： 1) Tests\Unit\ProjectTest::it_can_add_a_taskBadMethodCallException: Call to undefined method App\Project::addTask() 补全 addTask() 方法： 1234public function addTask($body)&#123; return $this-&gt;tasks()-&gt;create(compact('body'));&#125; 运行测试结果如下： 1) Tests\Unit\ProjectTest::it_can_add_a_taskBadMethodCallException: Call to undefined method App\Project::tasks() 补全 tasks() 方法： 1234public function tasks()&#123; return $this-&gt;hasMany(Task::class);&#125; 还没有 Task 模型及迁移文件，生成： 1php artisan make:model -m Task 完善模型和迁移文件： 12345678910&lt;?phpnamespace App;use Illuminate\Database\Eloquent\Model;class Task extends Model&#123; protected $guarded = [];&#125; 123456789101112131415161718192021222324252627282930313233&lt;?phpuse Illuminate\Support\Facades\Schema;use Illuminate\Database\Schema\Blueprint;use Illuminate\Database\Migrations\Migration;class CreateTasksTable extends Migration&#123; /** * Run the migrations. * * @return void */ public function up() &#123; Schema::create('tasks', function (Blueprint $table) &#123; $table-&gt;bigIncrements('id'); $table-&gt;unsignedBigInteger('project_id'); $table-&gt;text('body'); $table-&gt;timestamps(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; Schema::dropIfExists('tasks'); &#125;&#125; ProjectTest单元测试通过 优化之前的单元测试： 12345678910/** @test */public function it_can_add_a_task()&#123; $project = factory('App\Project')-&gt;create(); $task = $project-&gt;addTask('Test task'); $this-&gt;assertCount(1, $project-&gt;tasks); $this-&gt;assertTrue($project-&gt;tasks-&gt;contains($task));&#125; ProjectTest单元测试通过 在项目详情页注入任务，代码如下： 123456&lt;div class=&quot;mb-8&quot;&gt; &lt;h2 class=&quot;text-lg text-gray-500 text-sm font-normal mb-3&quot;&gt;Tasks&lt;/h2&gt; @foreach($project-&gt;tasks as $task) &lt;div class=&quot;card mb-3&quot;&gt;&#123;&#123; $task-&gt;body &#125;&#125;&lt;/div&gt; @endforeach&lt;/div&gt; 运行测试通过 优化 a_project_can_have_tasks 方法： 1234567891011121314/** @test */public function a_project_can_have_tasks()&#123; $this-&gt;signIn(); $project = auth()-&gt;user()-&gt;projects()-&gt;create( factory(Project::class)-&gt;raw() ); $this-&gt;post($project-&gt;path() .'/tasks', ['body' =&gt; 'Test task']); $this-&gt;get($project-&gt;path())-&gt;assertSee('Test task');&#125; 测试运行通过 测试 body 必填项： 123456789101112/** @test */public function a_task_requires_a_body()&#123; $this-&gt;signIn(); $project = auth()-&gt;user()-&gt;projects()-&gt;create( factory(Project::class)-&gt;raw() ); $attributes = factory('App\Task')-&gt;raw(['body'=&gt;'']); $this-&gt;post($project-&gt;path() .'/tasks', $attributes)-&gt;assertSessionHasErrors('body');&#125; 测试结果如下： 1) Tests\Feature\ProjectTasksTest::a_task_requires_a_bodyInvalidArgumentException: Unable to locate factory with name [default] [App\Task]. 生成 Task 数据工厂： 1php artisan make:factory TaskFactory 1234567891011&lt;?php/* @var $factory \Illuminate\Database\Eloquent\Factory */use Faker\Generator as Faker;$factory-&gt;define(\App\Task::class, function (Faker $faker) &#123; return [ 'body' =&gt; $faker-&gt;sentence ];&#125;); 测试结果如下： 1) Tests\Feature\ProjectTasksTest::a_task_requires_a_bodySession is missing expected key [errors].Failed asserting that false is true. 我们之前并没有设置 body 属性是必须的，现在设置上： 1234567public function store(Project $project)&#123; request()-&gt;validate(['body'=&gt; 'required']); $project-&gt;addTask(request('body')); return redirect($project-&gt;path());&#125; 测试通过]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之设计项目页面]]></title>
    <url>%2F2019-07-18-build-a-laravel-app-with-tdd-11.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 本小节都是前端优化界面的内容，大致记录下流程。 提取卡片样式 123456....card &#123; @apply .bg-white .p-5 .rounded-lg .shadow;&#125;@import "~tailwindcss/utilities"; 提取 card 布局放置 projects/card.blade.php： 12345678&lt;div class=&quot;card&quot; style=&quot;height: 200px&quot;&gt; &lt;h3 class=&quot;font-normal text-xl py-4 -ml-5 mb-3 border-l-4 border-blue-300 pl-4&quot;&gt; &lt;a href=&quot;&#123;&#123; $project-&gt;path() &#125;&#125;&quot; class=&quot;text-black no-underline&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/a&gt; &lt;/h3&gt; &lt;div class=&quot;text-gray-500&quot;&gt;&#123;&#123; \Illuminate\Support\Str::limit($project-&gt;description, 100) &#125;&#125; &lt;/div&gt;&lt;/div&gt; 修改 projects/index.php： 123456789&lt;main class=&quot;lg:flex lg:flex-wrap -mx-3&quot;&gt; @forelse($projects as $project) &lt;div class=&quot;lg:w-1/3 px-3 pb-6&quot;&gt; @include(&apos;projects.card&apos;) &lt;/div&gt; @empty &lt;div&gt;No project yet.&lt;/div&gt; @endforelse&lt;/main&gt; 重构 projects/show.blade.php： 123456789101112131415161718192021222324252627282930313233343536373839@extends('layouts.app')@section('content') &lt;header class="flex items-center mb-3 py-4"&gt; &lt;div class="flex justify-between items-end w-full"&gt; &lt;p class="text-gray-500 text-sm font-normal"&gt; &lt;a href="/projects" class="text-gray-500 text-sm font-normal no-underline hover:underline"&gt;My Projects&lt;/a&gt; / &#123;&#123;$project-&gt;title&#125;&#125; &lt;/p&gt; &lt;a href="/projects/create" class="button"&gt;New Project&lt;/a&gt; &lt;/div&gt; &lt;/header&gt; &lt;main&gt; &lt;div class="lg:flex -mx-3"&gt; &lt;div class="lg:w-3/4 px-3 mb-6"&gt; &lt;div class="mb-8"&gt; &lt;h2 class="text-lg text-gray-500 text-sm font-normal mb-3"&gt;Tasks&lt;/h2&gt; &lt;div class="card mb-3"&gt;11111&lt;/div&gt; &lt;div class="card mb-3"&gt;11111&lt;/div&gt; &lt;div class="card mb-3"&gt;11111&lt;/div&gt; &lt;div class="card mb-3"&gt;11111&lt;/div&gt; &lt;div class="card"&gt;11111&lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;h2 class="text-lg text-gray-500 text-sm font-normal mb-3"&gt;Note&lt;/h2&gt; &lt;textarea class="card w-full" style="min-height: 200px"&gt;11111&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="lg:w-1/4 px-3"&gt; @include('projects.card') &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;@endsection]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之界面优化]]></title>
    <url>%2F2019-07-16-build-a-laravel-app-with-tdd-10.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 本小节都是前端优化界面的内容，大致记录下流程。 编写一个 SVG 的 Logo 图片，保存至 public/images/logo.svg： 123456789101112&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;291&quot; height=&quot;45&quot; viewBox=&quot;0 0 291 45&quot;&gt; &lt;g fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt; &lt;g fill=&quot;#222&quot;&gt; &lt;path d=&quot;M58.544 19.568c1.056 0 1.988.26 2.796.78.808.52 1.436 1.252 1.884 2.196.448.944.672 2.04.672 3.288 0 1.248-.228 2.356-.684 3.324-.456.968-1.088 1.716-1.896 2.244-.808.528-1.732.792-2.772.792-.896 0-1.692-.192-2.388-.576a3.762 3.762 0 0 1-1.572-1.608V32h-2.952V14.336h2.976v7.368a3.893 3.893 0 0 1 1.584-1.572c.688-.376 1.472-.564 2.352-.564zm-.792 10.272c.992 0 1.76-.352 2.304-1.056.544-.704.816-1.688.816-2.952 0-1.248-.272-2.212-.816-2.892-.544-.68-1.32-1.02-2.328-1.02-1.008 0-1.784.344-2.328 1.032-.544.688-.816 1.664-.816 2.928 0 1.28.272 2.26.816 2.94.544.68 1.328 1.02 2.352 1.02zm8.76 2.16V19.88h2.976V32h-2.976zm-.192-17.616h3.336v2.952H66.32v-2.952zm12.984 5.208c.464 0 .864.064 1.2.192l-.024 2.736a4.171 4.171 0 0 0-1.584-.312c-1.024 0-1.804.296-2.34.888-.536.592-.804 1.376-.804 2.352V32h-2.976v-8.688c0-1.28-.064-2.424-.192-3.432h2.808l.24 2.136c.304-.784.784-1.384 1.44-1.8.656-.416 1.4-.624 2.232-.624zm14.232-5.256V32h-2.952v-1.944A3.893 3.893 0 0 1 89 31.628c-.688.376-1.472.564-2.352.564-1.04 0-1.968-.264-2.784-.792-.816-.528-1.452-1.276-1.908-2.244-.456-.968-.684-2.076-.684-3.324 0-1.248.224-2.344.672-3.288.448-.944 1.08-1.676 1.896-2.196.816-.52 1.752-.78 2.808-.78.864 0 1.636.18 2.316.54a3.8 3.8 0 0 1 1.572 1.524v-7.296h3zM87.44 29.84c.992 0 1.764-.344 2.316-1.032.552-.688.828-1.664.828-2.928s-.272-2.24-.816-2.928c-.544-.688-1.312-1.032-2.304-1.032-1.008 0-1.788.34-2.34 1.02-.552.68-.828 1.644-.828 2.892 0 1.264.276 2.248.828 2.952.552.704 1.324 1.056 2.316 1.056zm16.272-10.272c1.056 0 1.988.26 2.796.78.808.52 1.436 1.252 1.884 2.196.448.944.672 2.04.672 3.288 0 1.248-.228 2.356-.684 3.324-.456.968-1.088 1.716-1.896 2.244-.808.528-1.732.792-2.772.792-.896 0-1.692-.192-2.388-.576a3.762 3.762 0 0 1-1.572-1.608V32H96.8V14.336h2.976v7.368a3.893 3.893 0 0 1 1.584-1.572c.688-.376 1.472-.564 2.352-.564zm-.792 10.272c.992 0 1.76-.352 2.304-1.056.544-.704.816-1.688.816-2.952 0-1.248-.272-2.212-.816-2.892-.544-.68-1.32-1.02-2.328-1.02-1.008 0-1.784.344-2.328 1.032-.544.688-.816 1.664-.816 2.928 0 1.28.272 2.26.816 2.94.544.68 1.328 1.02 2.352 1.02zm14.256 2.352c-1.232 0-2.316-.256-3.252-.768a5.245 5.245 0 0 1-2.16-2.196c-.504-.952-.756-2.068-.756-3.348 0-1.28.252-2.396.756-3.348a5.245 5.245 0 0 1 2.16-2.196c.936-.512 2.02-.768 3.252-.768 1.216 0 2.288.256 3.216.768a5.264 5.264 0 0 1 2.148 2.196c.504.952.756 2.068.756 3.348 0 1.28-.252 2.396-.756 3.348a5.264 5.264 0 0 1-2.148 2.196c-.928.512-2 .768-3.216.768zm-.024-2.352c1.024 0 1.804-.332 2.34-.996.536-.664.804-1.652.804-2.964 0-1.296-.272-2.284-.816-2.964-.544-.68-1.312-1.02-2.304-1.02-1.008 0-1.784.34-2.328 1.02-.544.68-.816 1.668-.816 2.964 0 1.312.268 2.3.804 2.964.536.664 1.308.996 2.316.996zm20.328-9.96V32h-2.952v-1.944a3.893 3.893 0 0 1-1.584 1.572c-.688.376-1.472.564-2.352.564-1.056 0-1.992-.256-2.808-.768-.816-.512-1.448-1.24-1.896-2.184-.448-.944-.672-2.04-.672-3.288 0-1.248.228-2.356.684-3.324.456-.968 1.092-1.72 1.908-2.256.816-.536 1.744-.804 2.784-.804.88 0 1.664.188 2.352.564.688.376 1.216.9 1.584 1.572V19.88h2.952zm-6.072 9.96c.992 0 1.76-.344 2.304-1.032.544-.688.816-1.656.816-2.904 0-1.28-.272-2.264-.816-2.952-.544-.688-1.32-1.032-2.328-1.032-.992 0-1.764.356-2.316 1.068-.552.712-.828 1.7-.828 2.964 0 1.248.276 2.208.828 2.88.552.672 1.332 1.008 2.34 1.008zm15.864-10.248c.464 0 .864.064 1.2.192l-.024 2.736a4.171 4.171 0 0 0-1.584-.312c-1.024 0-1.804.296-2.34.888-.536.592-.804 1.376-.804 2.352V32h-2.976v-8.688c0-1.28-.064-2.424-.192-3.432h2.808l.24 2.136c.304-.784.784-1.384 1.44-1.8.656-.416 1.4-.624 2.232-.624zm14.232-5.256V32h-2.952v-1.944a3.893 3.893 0 0 1-1.584 1.572c-.688.376-1.472.564-2.352.564-1.04 0-1.968-.264-2.784-.792-.816-.528-1.452-1.276-1.908-2.244-.456-.968-.684-2.076-.684-3.324 0-1.248.224-2.344.672-3.288.448-.944 1.08-1.676 1.896-2.196.816-.52 1.752-.78 2.808-.78.864 0 1.636.18 2.316.54a3.8 3.8 0 0 1 1.572 1.524v-7.296h3zm-6.096 15.504c.992 0 1.764-.344 2.316-1.032.552-.688.828-1.664.828-2.928s-.272-2.24-.816-2.928c-.544-.688-1.312-1.032-2.304-1.032-1.008 0-1.788.34-2.34 1.02-.552.68-.828 1.644-.828 2.892 0 1.264.276 2.248.828 2.952.552.704 1.324 1.056 2.316 1.056z&quot;/&gt; &lt;text font-family=&quot;Helvetica&quot; font-size=&quot;12&quot; transform=&quot;translate(51 14)&quot;&gt; &lt;tspan x=&quot;120.117&quot; y=&quot;14&quot;&gt; feathery reminders&lt;/tspan&gt; &lt;/text&gt; &lt;/g&gt; &lt;path stroke=&quot;#222&quot; stroke-opacity=&quot;.218&quot; stroke-width=&quot;.5&quot; d=&quot;M12.454 37L9 39.784l6.598.852L12.299 43 26 40.636&quot;/&gt; &lt;path fill=&quot;#47D5FE&quot; d=&quot;M42.273 4C27.487 4 15.326 15.078 14.037 29.157c2.457-3.374 5.466-6.621 9.223-10.354a.738.738 0 0 1 1.029-.01c.286.273.29.722.01 1.001a169.806 169.806 0 0 0-2.688 2.732l-.175.184c-4.643 4.842-7.962 9.057-10.372 14.291a.702.702 0 0 0 .365.937.74.74 0 0 0 .963-.356 38.585 38.585 0 0 1 2.974-5.273c10.159-.253 19.406-5.757 24.252-14.515a.696.696 0 0 0-.016-.7.737.737 0 0 0-.625-.344h-2.694l4.83-2.689a.714.714 0 0 0 .328-.384A26.88 26.88 0 0 0 43 4.708.718.718 0 0 0 42.273 4z&quot;/&gt; &lt;/g&gt;&lt;/svg&gt; 修改布局文件 app.blade.php 的 Logo 显示部分： 123&lt;a class=&quot;navbar-brand&quot; href=&quot;&#123;&#123; url(&apos;/&apos;) &#125;&#125;&quot;&gt; &lt;img src=&quot;/images/logo.svg&quot; alt=&quot;Birdboard&quot;&gt;&lt;/a&gt; 在 app.scss 引入 ~tailwindcss/utilities 之前提取一个按钮组件： tailwindcss 组件都需要在 utilities 之前写 1234567.button &#123; @apply .text-white .no-underline .rounded-lg .text-sm .py-2 .px-5; box-shadow: 0 2px 7px 0 #b0eaff; background-color: #47cdff;&#125;@import "~tailwindcss/utilities"; Tailwind 配置文件中修改 blue-300 的颜色为 #8ae2fe projects/index.blade.php 中修改如下： 12345678910111213141516171819202122232425262728@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;header class=&quot;flex items-center mb-3 py-4&quot;&gt; &lt;div class=&quot;flex justify-between items-center w-full&quot;&gt; &lt;h2 class=&quot;text-gray-500 text-sm font-normal&quot;&gt;My Projects&lt;/h2&gt; &lt;a href=&quot;/projects/create&quot; class=&quot;button&quot;&gt;New Project&lt;/a&gt; &lt;/div&gt; &lt;/header&gt; &lt;main class=&quot;lg:flex lg:flex-wrap -mx-3&quot;&gt; @forelse($projects as $project) &lt;div class=&quot;lg:w-1/3 px-3 pb-6&quot;&gt; &lt;div class=&quot;bg-white p-5 rounded-lg shadow&quot; style=&quot;height: 200px&quot;&gt; &lt;h3 class=&quot;font-normal text-xl py-4 -ml-5 mb-3 border-l-4 border-blue-300 pl-4&quot;&gt; &lt;a href=&quot;&#123;&#123; $project-&gt;path() &#125;&#125;&quot; class=&quot;text-black no-underline&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/a&gt; &lt;/h3&gt; &lt;div class=&quot;text-gray-500&quot;&gt;&#123;&#123; \Illuminate\Support\Str::limit($project-&gt;description, 100) &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; @empty &lt;div&gt;No project yet.&lt;/div&gt; @endforelse &lt;/main&gt;@endsection]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之利用 Tailwind 构建 UI]]></title>
    <url>%2F2019-07-15-build-a-laravel-app-with-tdd-09.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 由于使用的 Tailwind 版本不一致，本节笔记和视频稍有出入。 首先在 app.scss 中删除 bootstrap 依赖，然后执行 1npm run watch 然后在 tailwind.config.js 中输入如下配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489module.exports = &#123; prefix: '', important: false, separator: ':', theme: &#123; screens: &#123; sm: '640px', md: '768px', lg: '1024px', xl: '1280px', &#125;, colors: &#123; transparent: 'transparent', black: '#000', white: '#fff', gray: &#123; 100: '#f5f6f9', 200: '#edf2f7', 300: '#e2e8f0', 400: '#cbd5e0', 500: '#a0aec0', 600: '#718096', 700: '#4a5568', 800: '#2d3748', 900: '#1a202c', &#125;, red: &#123; 100: '#fff5f5', 200: '#fed7d7', 300: '#feb2b2', 400: '#fc8181', 500: '#f56565', 600: '#e53e3e', 700: '#c53030', 800: '#9b2c2c', 900: '#742a2a', &#125;, orange: &#123; 100: '#fffaf0', 200: '#feebc8', 300: '#fbd38d', 400: '#f6ad55', 500: '#ed8936', 600: '#dd6b20', 700: '#c05621', 800: '#9c4221', 900: '#7b341e', &#125;, yellow: &#123; 100: '#fffff0', 200: '#fefcbf', 300: '#faf089', 400: '#f6e05e', 500: '#ecc94b', 600: '#d69e2e', 700: '#b7791f', 800: '#975a16', 900: '#744210', &#125;, green: &#123; 100: '#f0fff4', 200: '#c6f6d5', 300: '#9ae6b4', 400: '#68d391', 500: '#48bb78', 600: '#38a169', 700: '#2f855a', 800: '#276749', 900: '#22543d', &#125;, teal: &#123; 100: '#e6fffa', 200: '#b2f5ea', 300: '#81e6d9', 400: '#4fd1c5', 500: '#38b2ac', 600: '#319795', 700: '#2c7a7b', 800: '#285e61', 900: '#234e52', &#125;, blue: &#123; 100: '#ebf8ff', 200: '#bee3f8', 300: '#90cdf4', 400: '#63b3ed', 500: '#4299e1', 600: '#3182ce', 700: '#2b6cb0', 800: '#2c5282', 900: '#2a4365', &#125;, indigo: &#123; 100: '#ebf4ff', 200: '#c3dafe', 300: '#a3bffa', 400: '#7f9cf5', 500: '#667eea', 600: '#5a67d8', 700: '#4c51bf', 800: '#434190', 900: '#3c366b', &#125;, purple: &#123; 100: '#faf5ff', 200: '#e9d8fd', 300: '#d6bcfa', 400: '#b794f4', 500: '#9f7aea', 600: '#805ad5', 700: '#6b46c1', 800: '#553c9a', 900: '#44337a', &#125;, pink: &#123; 100: '#fff5f7', 200: '#fed7e2', 300: '#fbb6ce', 400: '#f687b3', 500: '#ed64a6', 600: '#d53f8c', 700: '#b83280', 800: '#97266d', 900: '#702459', &#125;, &#125;, spacing: &#123; px: '1px', '0': '0', '1': '0.25rem', '2': '0.5rem', '3': '0.75rem', '4': '1rem', '5': '1.25rem', '6': '1.5rem', '8': '2rem', '10': '2.5rem', '12': '3rem', '16': '4rem', '20': '5rem', '24': '6rem', '32': '8rem', '40': '10rem', '48': '12rem', '56': '14rem', '64': '16rem', &#125;, backgroundColor: theme =&gt; theme('colors'), backgroundPosition: &#123; bottom: 'bottom', center: 'center', left: 'left', 'left-bottom': 'left bottom', 'left-top': 'left top', right: 'right', 'right-bottom': 'right bottom', 'right-top': 'right top', top: 'top', &#125;, backgroundSize: &#123; auto: 'auto', cover: 'cover', contain: 'contain', &#125;, borderColor: theme =&gt; (&#123; ...theme('colors'), default: theme('colors.gray.300', 'currentColor'), &#125;), borderRadius: &#123; none: '0', sm: '0.125rem', default: '0.25rem', lg: '0.5rem', full: '9999px', &#125;, borderWidth: &#123; default: '1px', '0': '0', '2': '2px', '4': '4px', '8': '8px', &#125;, boxShadow: &#123; default: '0 0 5px 0 rgba(0, 0, 0, 0.08)', md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)', '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)', inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)', outline: '0 0 0 3px rgba(66, 153, 225, 0.5)', none: 'none', &#125;, container: &#123;&#125;, cursor: &#123; auto: 'auto', default: 'default', pointer: 'pointer', wait: 'wait', text: 'text', move: 'move', 'not-allowed': 'not-allowed', &#125;, fill: &#123; current: 'currentColor', &#125;, flex: &#123; '1': '1 1 0%', auto: '1 1 auto', initial: '0 1 auto', none: 'none', &#125;, flexGrow: &#123; '0': '0', default: '1', &#125;, flexShrink: &#123; '0': '0', default: '1', &#125;, fontFamily: &#123; sans: [ '-apple-system', 'BlinkMacSystemFont', '"Segoe UI"', 'Roboto', '"Helvetica Neue"', 'Arial', '"Noto Sans"', 'sans-serif', '"Apple Color Emoji"', '"Segoe UI Emoji"', '"Segoe UI Symbol"', '"Noto Color Emoji"', ], serif: [ 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif', ], mono: [ 'Menlo', 'Monaco', 'Consolas', '"Liberation Mono"', '"Courier New"', 'monospace', ], &#125;, fontSize: &#123; xs: '0.75rem', sm: '0.875rem', base: '1rem', lg: '1.125rem', xl: '1.25rem', '2xl': '1.5rem', '3xl': '1.875rem', '4xl': '2.25rem', '5xl': '3rem', '6xl': '4rem', &#125;, fontWeight: &#123; hairline: '100', thin: '200', light: '300', normal: '400', medium: '500', semibold: '600', bold: '700', extrabold: '800', black: '900', &#125;, height: theme =&gt; (&#123; auto: 'auto', ...theme('spacing'), full: '100%', screen: '100vh', &#125;), inset: &#123; '0': '0', auto: 'auto', &#125;, letterSpacing: &#123; tighter: '-0.05em', tight: '-0.025em', normal: '0', wide: '0.025em', wider: '0.05em', widest: '0.1em', &#125;, lineHeight: &#123; none: '1', tight: '1.25', snug: '1.375', normal: '1.5', relaxed: '1.625', loose: '2', &#125;, listStyleType: &#123; none: 'none', disc: 'disc', decimal: 'decimal', &#125;, margin: (theme, &#123; negative &#125;) =&gt; (&#123; auto: 'auto', ...theme('spacing'), ...negative(theme('spacing')), &#125;), maxHeight: &#123; full: '100%', screen: '100vh', &#125;, maxWidth: &#123; xs: '20rem', sm: '24rem', md: '28rem', lg: '32rem', xl: '36rem', '2xl': '42rem', '3xl': '48rem', '4xl': '56rem', '5xl': '64rem', '6xl': '72rem', full: '100%', &#125;, minHeight: &#123; '0': '0', full: '100%', screen: '100vh', &#125;, minWidth: &#123; '0': '0', full: '100%', &#125;, objectPosition: &#123; bottom: 'bottom', center: 'center', left: 'left', 'left-bottom': 'left bottom', 'left-top': 'left top', right: 'right', 'right-bottom': 'right bottom', 'right-top': 'right top', top: 'top', &#125;, opacity: &#123; '0': '0', '25': '0.25', '50': '0.5', '75': '0.75', '100': '1', &#125;, order: &#123; first: '-9999', last: '9999', none: '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', '10': '10', '11': '11', '12': '12', &#125;, padding: theme =&gt; theme('spacing'), stroke: &#123; current: 'currentColor', &#125;, textColor: theme =&gt; theme('colors'), width: theme =&gt; (&#123; auto: 'auto', ...theme('spacing'), '1/2': '50%', '1/3': '33.333333%', '2/3': '66.666667%', '1/4': '25%', '2/4': '50%', '3/4': '75%', '1/5': '20%', '2/5': '40%', '3/5': '60%', '4/5': '80%', '1/6': '16.666667%', '2/6': '33.333333%', '3/6': '50%', '4/6': '66.666667%', '5/6': '83.333333%', '1/12': '8.333333%', '2/12': '16.666667%', '3/12': '25%', '4/12': '33.333333%', '5/12': '41.666667%', '6/12': '50%', '7/12': '58.333333%', '8/12': '66.666667%', '9/12': '75%', '10/12': '83.333333%', '11/12': '91.666667%', full: '100%', screen: '100vw', &#125;), zIndex: &#123; auto: 'auto', '0': '0', '10': '10', '20': '20', '30': '30', '40': '40', '50': '50', &#125;, &#125;, variants: &#123; accessibility: ['responsive', 'focus'], alignContent: ['responsive'], alignItems: ['responsive'], alignSelf: ['responsive'], appearance: ['responsive'], backgroundAttachment: ['responsive'], backgroundColor: ['responsive', 'hover', 'focus'], backgroundPosition: ['responsive'], backgroundRepeat: ['responsive'], backgroundSize: ['responsive'], borderCollapse: ['responsive'], borderColor: ['responsive', 'hover', 'focus'], borderRadius: ['responsive'], borderStyle: ['responsive'], borderWidth: ['responsive'], boxShadow: ['responsive', 'hover', 'focus'], cursor: ['responsive'], display: ['responsive'], fill: ['responsive'], flex: ['responsive'], flexDirection: ['responsive'], flexGrow: ['responsive'], flexShrink: ['responsive'], flexWrap: ['responsive'], float: ['responsive'], fontFamily: ['responsive'], fontSize: ['responsive'], fontSmoothing: ['responsive'], fontStyle: ['responsive'], fontWeight: ['responsive', 'hover', 'focus'], height: ['responsive'], inset: ['responsive'], justifyContent: ['responsive'], letterSpacing: ['responsive'], lineHeight: ['responsive'], listStylePosition: ['responsive'], listStyleType: ['responsive'], margin: ['responsive'], maxHeight: ['responsive'], maxWidth: ['responsive'], minHeight: ['responsive'], minWidth: ['responsive'], objectFit: ['responsive'], objectPosition: ['responsive'], opacity: ['responsive'], order: ['responsive'], outline: ['responsive', 'focus'], overflow: ['responsive'], padding: ['responsive'], pointerEvents: ['responsive'], position: ['responsive'], resize: ['responsive'], stroke: ['responsive'], tableLayout: ['responsive'], textAlign: ['responsive'], textColor: ['responsive', 'hover', 'focus'], textDecoration: ['responsive', 'hover', 'focus'], textTransform: ['responsive'], userSelect: ['responsive'], verticalAlign: ['responsive'], visibility: ['responsive'], whitespace: ['responsive'], width: ['responsive'], wordBreak: ['responsive'], zIndex: ['responsive'], &#125;, corePlugins: &#123;&#125;, plugins: [],&#125; 修改布局文件 layouts/app.blade.php： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!DOCTYPE html&gt;&lt;html lang=&quot;&#123;&#123; str_replace(&apos;_&apos;, &apos;-&apos;, app()-&gt;getLocale()) &#125;&#125;&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- CSRF Token --&gt; &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt; &lt;title&gt;&#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125;&lt;/title&gt; &lt;!-- Scripts --&gt; &lt;script src=&quot;&#123;&#123; asset(&apos;js/app.js&apos;) &#125;&#125;&quot; defer&gt;&lt;/script&gt; &lt;!-- Fonts --&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//fonts.gstatic.com&quot;&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=Nunito&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- Styles --&gt; &lt;link href=&quot;&#123;&#123; asset(&apos;css/app.css&apos;) &#125;&#125;&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;&lt;body class=&quot;bg-gray-100&quot;&gt; &lt;div id=&quot;app&quot;&gt; &lt;nav class=&quot;bg-white&quot;&gt; &lt;div class=&quot;container mx-auto&quot;&gt; &lt;div class=&quot;flex justify-between items-center py-2&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;&#123;&#123; url(&apos;/&apos;) &#125;&#125;&quot;&gt; &#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125; &lt;/a&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarSupportedContent&quot;&gt; &lt;!-- Right Side Of Navbar --&gt; &lt;ul class=&quot;navbar-nav ml-auto&quot;&gt; &lt;!-- Authentication Links --&gt; @guest &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;&#123;&#123; route(&apos;login&apos;) &#125;&#125;&quot;&gt;&#123;&#123; __(&apos;Login&apos;) &#125;&#125;&lt;/a&gt; &lt;/li&gt; @if (Route::has(&apos;register&apos;)) &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;&#123;&#123; route(&apos;register&apos;) &#125;&#125;&quot;&gt;&#123;&#123; __(&apos;Register&apos;) &#125;&#125;&lt;/a&gt; &lt;/li&gt; @endif @else &lt;li class=&quot;nav-item dropdown&quot;&gt; &lt;a id=&quot;navbarDropdown&quot; class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; role=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; v-pre&gt; &#123;&#123; Auth::user()-&gt;name &#125;&#125; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;div class=&quot;dropdown-menu dropdown-menu-right&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;&#123;&#123; route(&apos;logout&apos;) &#125;&#125;&quot; onclick=&quot;event.preventDefault(); document.getElementById(&apos;logout-form&apos;).submit();&quot;&gt; &#123;&#123; __(&apos;Logout&apos;) &#125;&#125; &lt;/a&gt; &lt;form id=&quot;logout-form&quot; action=&quot;&#123;&#123; route(&apos;logout&apos;) &#125;&#125;&quot; method=&quot;POST&quot; style=&quot;display: none;&quot;&gt; @csrf &lt;/form&gt; &lt;/div&gt; &lt;/li&gt; @endguest &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;main class=&quot;container mx-auto py-4&quot;&gt; @yield(&apos;content&apos;) &lt;/main&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 修改 projects/index.blade.php 文件： 123456789101112131415161718192021@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;div class=&quot;flex items-center mb-3&quot;&gt; &lt;h1 class=&quot;mr-auto&quot;&gt;Birdboard&lt;/h1&gt; &lt;a href=&quot;/projects/create&quot;&gt;New Project&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;flex&quot;&gt; @forelse($projects as $project) &lt;div class=&quot;bg-white mr-4 p-5 rounded shadow w-1/3&quot;&gt; &lt;h3 class=&quot;font-normal text-xl py-4&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/h3&gt; &lt;div class=&quot;text-gray-500&quot;&gt;&#123;&#123; \Illuminate\Support\Str::limit($project-&gt;description, 100) &#125;&#125;&lt;/div&gt; &lt;/div&gt; @empty &lt;div&gt;No project yet.&lt;/div&gt; @endforelse &lt;/div&gt;@endsection 目前头部导航样式还不尽如人意，之后再做优化。]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之前端预设]]></title>
    <url>%2F2019-07-14-build-a-laravel-app-with-tdd-08.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 利用已有的布局界面重构页面 修改项目列表页： resources/views/projects/index.blade.php 12345678910111213141516171819@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;div style=&quot;display: flex;align-items: center&quot;&gt; &lt;h1 style=&quot;margin-right: auto&quot;&gt;Birdboard&lt;/h1&gt; &lt;a href=&quot;/projects/create&quot;&gt;New Project&lt;/a&gt; &lt;/div&gt; &lt;ul&gt; @forelse($projects as $project) &lt;li&gt; &lt;a href=&quot;&#123;&#123; $project-&gt;path() &#125;&#125;&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/a&gt; &lt;/li&gt; @empty &lt;li&gt;No project yet.&lt;/li&gt; @endforelse &lt;/ul&gt;@endsection 修改布局文件： resources/views/layouts/app.blade.php 123&lt;main class=&quot;container py-4&quot;&gt; @yield(&apos;content&apos;)&lt;/main&gt; 修改项目详情页： resources/views/projects/show.blade.php 12345678@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;)&lt;h1&gt;&#123;&#123;$project-&gt;title&#125;&#125;&lt;/h1&gt;&lt;div&gt;&#123;&#123;$project-&gt;description&#125;&#125;&lt;/div&gt;&lt;a href=&quot;/projects&quot;&gt;Go Back&lt;/a&gt;@endsection 修改项目创建页： resources/views/projects/create.blade.php 1234567891011121314151617181920212223242526272829@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;)&lt;form method=&quot;post&quot; action=&quot;/projects&quot;&gt; @csrf &lt;h1 class=&quot;heading is-1&quot;&gt;Create a Project&lt;/h1&gt; &lt;div class=&quot;field&quot;&gt; &lt;label class=&quot;label&quot; for=&quot;title&quot;&gt;Title&lt;/label&gt; &lt;div class=&quot;control&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;input&quot; name=&quot;title&quot; placeholder=&quot;Title&quot; id=&quot;title&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;label class=&quot;label&quot; for=&quot;description&quot;&gt;Description&lt;/label&gt; &lt;div class=&quot;control&quot;&gt; &lt;textarea class=&quot;textarea&quot; name=&quot;description&quot; placeholder=&quot;Description&quot; id=&quot;description&quot;&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;div class=&quot;control&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;button is-link&quot;&gt;Create Project&lt;/button&gt; &lt;a href=&quot;/projects&quot;&gt;Cancel&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;@endsection Laravel 前端脚手架 安装依赖包 1npm install 编译开发环境文件 1npm run development 安装 tailwindcss 依赖 1npm install tailwindcss --save-dev 在 app.scss 中导入组件： 12345@import "~tailwindcss/base";@import "~tailwindcss/components";@import "~tailwindcss/utilities"; 由于没有安装 postCSS，所以需要一点设置： 12# 生成配置文件npx tailwind init webpack.mix.js 配置如下： 12345678910const mix = require('laravel-mix');const tailwindcss = require('tailwindcss')mix.js('resources/js/app.js', 'public/js') .sass('resources/sass/app.scss', 'public/css') .options(&#123; processCssUrls: false, postCss: [ tailwindcss('tailwind.config.js') ], &#125;) 现在可以顺利编译文件了。]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之创建项目视图]]></title>
    <url>%2F2019-07-02-build-a-laravel-app-with-tdd-07.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 游客无法操作项目之前的很多测试都是在用户登录的状态下写的测试用例，现在我们来写一份游客相关的测试： 123456789/** @test */public function guests_cannot_manage_projects()&#123; $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects')-&gt;assertRedirect('login'); $this-&gt;get($project-&gt;path())-&gt;assertRedirect('login'); $this-&gt;post('/projects', $project-&gt;toArray())-&gt;assertRedirect('login');&#125; 运行测试成功！ 创建项目视图目前我们还没有创建项目视图，实际项目中应该有一个创建项目的页面。让我们先从测试开始： 1234567891011/** @test */public function a_user_can_create_a_project()&#123; $this-&gt;withoutExceptionHandling(); $this-&gt;actingAs(factory('App\User')-&gt;create()); $this-&gt;get('/projects/create')-&gt;assertStatus(200); ...&#125; 运行测试结果如下： Tests\Feature\ManageProjectsTest::a_user_can_create_a_projectIlluminate\Database\Eloquent\ModelNotFoundException: No query results for model [App\Project] create 增加路由： 123456Route::group(['middleware' =&gt; 'auth'], function () &#123; Route::get('/projects', 'ProjectsController@index'); Route::get('/projects/create', 'ProjectsController@create'); Route::get('/projects/&#123;project&#125;', 'ProjectsController@show'); Route::post('/projects', 'ProjectsController@store');&#125;); 运行测试结果如下： Tests\Feature\ManageProjectsTest::a_user_can_create_a_projectBadMethodCallException: Method App\Http\Controllers\ProjectsController::create does not exist. 增加方法： 1234public function create()&#123;&#125; 运行测试成功！ 创建视图文件： 1234public function create()&#123; return view('projects.create');&#125; 12345678910111213141516171819202122232425262728293031323334353637&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link href=&quot;https://cdn.bootcss.com/bulma/0.7.5/css/bulma.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;title&gt;Birdboard&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;post&quot; action=&quot;/projects&quot; class=&quot;container&quot; style=&quot;padding-top: 40px&quot;&gt; @csrf &lt;h1 class=&quot;heading is-1&quot;&gt;Create a Project&lt;/h1&gt; &lt;div class=&quot;field&quot;&gt; &lt;label class=&quot;label&quot; for=&quot;title&quot;&gt;Title&lt;/label&gt; &lt;div class=&quot;control&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;input&quot; name=&quot;title&quot; placeholder=&quot;Title&quot; id=&quot;title&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;label class=&quot;label&quot; for=&quot;description&quot;&gt;Description&lt;/label&gt; &lt;div class=&quot;control&quot;&gt; &lt;textarea class=&quot;textarea&quot; name=&quot;description&quot; placeholder=&quot;Description&quot; id=&quot;description&quot;&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;div class=&quot;control&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;button is-link&quot;&gt;Create Project&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 在游客无法操作项目中新增创建视图测试： 12345678910/** @test */public function guests_cannot_manage_projects()&#123; $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects')-&gt;assertRedirect('login'); $this-&gt;get('/projects/create')-&gt;assertRedirect('login'); $this-&gt;get($project-&gt;path())-&gt;assertRedirect('login'); $this-&gt;post('/projects', $project-&gt;toArray())-&gt;assertRedirect('login');&#125; 运行测试成功！]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之项目范围界定]]></title>
    <url>%2F2019-06-29-build-a-laravel-app-with-tdd-06.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 之前的项目列表是显示所有项目，在加入所有者之后，应该显示当前用户的项目比较合适。让我们来修改相关的代码： 123456789# 控制器public function index()&#123; $projects = auth()-&gt;user()-&gt;projects; return view('projects.index', compact('projects'));&#125;# 路由文件Route::get('/projects', 'ProjectsController@index')-&gt;middleware('auth'); 打开 http://birdboard.test/projects ，测试需要登录，注册登录后，显示 No project yet. 让我们来模拟数据，进入 tinker： 1App\Project::forceCreate(['title' =&gt; 'Hello', 'description'=&gt; 'This is description', 'owner_id' =&gt; 1]); 数据创建成功。此时再看列表页，有一个项目。 同理，show() 方法中，当前用户也只能查看自己的项目，编写测试用例： 1234567/** @test */public function guests_cannot_view_a_single_project()&#123; $project = factory('App\Project')-&gt;create(); $this-&gt;get($project-&gt;path())-&gt;assertRedirect('login');&#125; 运行测试用例结果如下： Tests\Feature\ProjectsTest::guests_cannot_view_a_single_projectResponse status code [200] is not a redirect status code.Failed asserting that false is true. 修改路由： 1Route::get('/projects/&#123;project&#125;', 'ProjectsController@show')-&gt;middleware('auth'); 运行测试用例成功！ 运行所有测试用例结果如下： Tests\Feature\ProjectsTest::a_user_can_view_a_projectIlluminate\Auth\AuthenticationException: Unauthenticated. 让我们换个更贴切的名字并修改测试用例模拟用户登录： 12345678910111213/** @test */public function a_user_can_view_their_project()&#123; $this-&gt;be(factory('App\User')-&gt;create()); $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(['owner_id'=&gt; auth()-&gt;id()]); $this-&gt;get($project-&gt;path()) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description);&#125; 运行测试用例成功！ 优化路由： 12345Route::group(['middleware' =&gt; 'auth'], function () &#123; Route::get('/projects', 'ProjectsController@index'); Route::get('/projects/&#123;project&#125;', 'ProjectsController@show'); Route::post('/projects', 'ProjectsController@store');&#125;); 运行测试用例成功！ 用户可以查看自己的项目，但是无法查看其他人的项目，代码如下： 12345678910111213/** @test */public function an_authenticated_user_cannot_view_the_projects_of_others()&#123; $this-&gt;be(factory('App\User')-&gt;create()); $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(); $this-&gt;get($project-&gt;path()) -&gt;assertStatus(403);&#125; 运行测试用例，结果如下： Tests\Feature\ProjectsTest::an_authenticated_user_cannot_view_the_projects_of_othersExpected status code 403 but received 200.Failed asserting that false is true. 我们没有在对应方法里添加任何限制，所以失败是必然的。在方法中加入限制： 1234567public function show(Project $project)&#123; if (auth()-&gt;id() != $project-&gt;owner_id) &#123; abort(403); &#125; return view('projects.show', compact('project'));&#125; 运行测试用例，结果如下： Tests\Feature\ProjectsTest::an_authenticated_user_cannot_view_the_projects_of_othersSymfony\Component\HttpKernel\Exception\HttpException: 测试方法忽略异常处理： 1234567891011/** @test */public function an_authenticated_user_cannot_view_the_projects_of_others()&#123; $this-&gt;be(factory('App\User')-&gt;create()); $project = factory('App\Project')-&gt;create(); $this-&gt;get($project-&gt;path()) -&gt;assertStatus(403);&#125; 运行测试用例成功！ 用户和项目是一对多的关系，之前我们测试了一个用户有多个项目，现在来写一个项目属于用户的测试方法，在单元测试中写入： 1234567/** @test */public function it_belongs_to_an_owner()&#123; $project = factory('App\Project')-&gt;create(); $this-&gt;assertInstanceOf('App\User', $project-&gt;owner);&#125; 运行测试结果如下： Tests\Unit\ProjectTest::it_belongs_to_an_ownerFailed asserting that null is an instance of class “App\User”. 在 Project 模型中加入以下关联关系： 1234public function owner()&#123; return $this-&gt;belongsTo(User::class);&#125; 运行测试用例成功！ 最后来优化下代码： 1234567public function show(Project $project)&#123; if (auth()-&gt;id() != $project-&gt;owner_id) &#123; abort(403); &#125; return view('projects.show', compact('project'));&#125; 之前的判断所属，可以用另一种更加直观的方式来判断了： 12345678public function show(Project $project)&#123; if (auth()-&gt;user()-&gt;isNot($project-&gt;owner)) &#123; abort(403); &#125; return view('projects.show', compact('project'));&#125; 运行测试用例成功！]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之项目所有者]]></title>
    <url>%2F2019-06-29-build-a-laravel-app-with-tdd-05.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 现在我们虽然可以创建项目了，但是和用户没有任何关系，为了解决这个问题，我们将编写一个测试来确认经过身份验证的用户始终被指定为在其会话期间创建的任何新项目的所有者。 项目需要一个所有者编写一个功能测试： 123456/** @test */public function a_project_requires_an_owner()&#123; $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('owner');&#125; 运行测试，报错： There was 1 failure: 1) Tests\Feature\ProjectsTest::a_project_requires_an_ownerSession is missing expected key [errors].Failed asserting that false is true. OK，这完全是因为我们的表结构没有关于任何用户相关的字段。修改下 projects 表文件： 123456789101112public function up()&#123; Schema::create('projects', function (Blueprint $table) &#123; $table-&gt;bigIncrements('id'); $table-&gt;unsignedBigInteger('owner_id'); $table-&gt;string('title'); $table-&gt;text('description'); $table-&gt;timestamps(); &#125;); $table-&gt;foreign('owner_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');&#125; 重置迁移文件： 1php artisan migrate:refresh 运行测试，出现错误，忽略异常处理： 12345678/** @test */public function a_project_requires_an_owner()&#123; $this-&gt;withoutExceptionHandling(); $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('owner');&#125; 然后再执行测试： Tests\Feature\ProjectsTest::a_project_requires_an_ownerIlluminate\Database\QueryException: SQLSTATE[23000]: Integrity constraint violation: 19 NOT NULL constraint failed: projects.owner_id (SQL: insert into “projects” (“title”, “description”, “updated_at”, “created_at”) values (Porro sint expedita aut facilis nemo., Nihil ea et qui vitae tempora qui sit. Maxime accusamus illum omnis excepturi magnam. Ipsa qui libero necessitatibus esse asperiores quo sed., 2019-06-29 00:33:42, 2019-06-29 00:33:42)) 在模拟假数据的时候，我们并没有模拟 owner_id 的值，需要添加： database/factories/ProjectFactory.php 12345678910111213141516&lt;?php/* @var $factory \Illuminate\Database\Eloquent\Factory */use App\Project;use Faker\Generator as Faker;$factory-&gt;define(Project::class, function (Faker $faker) &#123; return [ 'title' =&gt; $faker-&gt;sentence, 'description' =&gt; $faker-&gt;paragraph, 'owner_id' =&gt; function() &#123; return factory(App\User::class)-&gt;create()-&gt;id; &#125; ];&#125;); 修改验证方法： 123456789101112public function store()&#123; $attributes = request()-&gt;validate([ 'title' =&gt; 'required', 'description' =&gt; 'required', 'owner_id' =&gt; 'required', ]); Project::create($attributes); return redirect('/projects');&#125; 运行测试 pf a_project_requires_an_owner： 1) Tests\Feature\ProjectsTest::a_project_requires_an_ownerSession is missing expected key [errors].Failed asserting that false is true. 修改测试用例： 12345678/** @test */public function a_project_requires_an_owner()&#123; //$this-&gt;withoutExceptionHandling(); $attributes = factory('App\Project')-&gt;raw(['owner_id' =&gt; null]); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('owner_id');&#125; 运行测试 pf a_project_requires_an_owner 成功！ 在实际创建项目这个过程中，owner_id 并非直接 post 方法传递过来的，而是当前登录用户的 ID。所以我们要修改 owner_id的获取 ： 12345678910111213public function store()&#123; $attributes = request()-&gt;validate([ 'title' =&gt; 'required', 'description' =&gt; 'required', ]); $attributes['owner_id'] = auth()-&gt;id(); Project::create($attributes); return redirect('/projects');&#125; 测试用例： 123456/** @test */public function a_project_requires_an_owner()&#123; $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('login');&#125; 运行测试结果： 123Tests\Feature\ProjectsTest::a_project_requires_an_ownerResponse status code [500] is not a redirect status code.Failed asserting that false is true. 修改测试用例： 123456/** @test */public function a_project_requires_an_owner()&#123; $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('login');&#125; 运行测试结果： 1) Tests\Feature\ProjectsTest::a_project_requires_an_ownerIlluminate\Database\QueryException: SQLSTATE[23000]: Integrity constraint violation: 19 NOT NULL constraint failed: projects.owner_id (SQL: insert into “projects” (“title”, “description”, “owner_id”, “updated_at”, “created_at”) values (Qui nobis qui occaecati est corrupti necessitatibus., Sunt nesciunt voluptate nostrum. Odit et ullam et officiis dicta. Amet est sed rerum est quod aut ipsa., ?, 2019-06-29 05:52:01, 2019-06-29 05:52:01)) 修改路由文件，让创建操作需要登录： 1Route::post('/projects', 'ProjectsController@store')-&gt;middleware('auth'); 运行测试结果： 1) Tests\Feature\ProjectsTest::a_project_requires_an_ownerInvalidArgumentException: Route [login] not defined. OK，快速创建认证系统： 1php artisan make:auth 运行测试结果： 1) Tests\Feature\ProjectsTest::a_project_requires_an_ownerIlluminate\Auth\AuthenticationException: Unauthenticated. 修改测试用例： 123456/** @test */public function a_project_requires_an_owner()&#123; $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('login');&#125; 运行测试 pf a_project_requires_an_owner 成功！ 修改方法名，并移动该方法至最前面： 123456/** @test */public function only_authenticated_user_can_create_projects()&#123; $attributes = factory('App\Project')-&gt;raw(); $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('login');&#125; 运行测试整个项目，结果如下： There were 2 failures: 1) Tests\Feature\ProjectsTest::a_project_requires_titleSession is missing expected key [errors].Failed asserting that false is true. /Users/jaya/wwwroot/birdboard/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestResponse.php:862/Users/jaya/wwwroot/birdboard/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestResponse.php:900/Users/jaya/wwwroot/birdboard/tests/Feature/ProjectsTest.php:55 2) Tests\Feature\ProjectsTest::a_project_requires_descriptionSession is missing expected key [errors].Failed asserting that false is true. 原因在于这两个测试用例，目前需要登录的前提下操作了。所以我们需要用 actingAs() 方法模拟登录用户： 1234567/** @test */public function a_project_requires_title()&#123; $this-&gt;actingAs(factory('App\User')-&gt;create()); $attributes = factory('App\Project')-&gt;raw(['title' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('title');&#125; 运行测试 pf a_project_requires_title 成功。 同理： 1234567/** @test */public function a_project_requires_description()&#123; $this-&gt;actingAs(factory('App\User')-&gt;create()); $attributes = factory('App\Project')-&gt;raw(['description' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('description');&#125; 运行测试 pf a_project_requires_description 成功。 运行整个测试文件 pf ProjectsTest，结果如下： 1) Tests\Feature\ProjectsTest::a_user_can_create_a_projectIlluminate\Auth\AuthenticationException: Unauthenticated. 修改该方法： 12345678910111213141516171819 /** @test */public function a_user_can_create_a_project()&#123; $this-&gt;withoutExceptionHandling(); $this-&gt;actingAs(factory('App\User')-&gt;create()); $attributes = [ 'title' =&gt; $this-&gt;faker-&gt;sentence, 'description' =&gt; $this-&gt;faker-&gt;paragraph ]; $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('/projects'); // 断言数据库中的数据是否和给定数据集合匹配 $this-&gt;assertDatabaseHas('projects', $attributes); $this-&gt;get('/projects')-&gt;assertSee($attributes['title']);&#125; 运行整个测试文件 pf ProjectsTest 成功！ 模型关联优化代码store() 方法中的 $attributes[&#39;owner_id&#39;] = auth()-&gt;id(); ，可以换成更加通俗易懂的表达方式： 1auth()-&gt;user()-&gt;projects()-&gt;create($attributes); 运行测试 pf a_user_can_create_a_project，结果如下： Tests\Feature\ProjectsTest::a_user_can_create_a_projectBadMethodCallException: Call to undefined method App\User::projects() OK，是时候开始写 User 模型的单元测试了： 1php artisan make:test UserTest --unit 测试用例： 123456789101112131415161718192021&lt;?phpnamespace Tests\Unit;use Illuminate\Database\Eloquent\Collection;use Tests\TestCase;use Illuminate\Foundation\Testing\WithFaker;use Illuminate\Foundation\Testing\RefreshDatabase;class UserTest extends TestCase&#123; use RefreshDatabase; /** @test */ public function a_user_has_projects() &#123; $user = factory('App\User')-&gt;create(); $this-&gt;assertInstanceOf(Collection::class, $user-&gt;projects); &#125;&#125; 运行测试 pf a_user_can_create_a_project，结果如下： Tests\Feature\ProjectsTest::a_user_can_create_a_projectBadMethodCallException: Call to undefined method App\User::projects() 在 User 模型中，添加 projects 方法： 1234public function projects()&#123; return $this-&gt;hasMany(Project::class);&#125; 运行测试 pf UserTest，结果如下： PDOException: SQLSTATE[HY000]: General error: 1 no such column: projects.user_id 在模型关联中，默认的外键是 模型名_id 的形式，但是我们在 projects 表中的外键名是 owner_id，所以需要设置下外键名： 1234public function projects()&#123; return $this-&gt;hasMany(Project::class, 'owner_id');&#125; 运行测试 pf UserTest 成功。 运行测试 pf a_user_can_create_a_project，结果如下： 1) Tests\Feature\ProjectsTest::a_user_can_create_a_projectIlluminate\Database\QueryException: SQLSTATE[23000]: Integrity constraint violation: 19 NOT NULL constraint failed: projects.owner_id (SQL: insert into “projects” (“title”, “description”, “updated_at”, “created_at”) values (Quia labore voluptates quod sunt commodi eius nostrum., Est est quibusdam porro rem nihil reiciendis quod. Aspernatur eligendi quia minus vel ducimus. Facilis ut sint accusantium quia quisquam. Cupiditate deleniti nemo facilis quidem et., 2019-06-29 08:08:15, 2019-06-29 08:08:15)) 修改控制器： 1234567891011public function store()&#123; $attributes = request()-&gt;validate([ 'title' =&gt; 'required', 'description' =&gt; 'required', ]); auth()-&gt;user()-&gt;projects()-&gt;create($attributes); return redirect('/projects');&#125; 运行测试 pf a_user_can_create_a_project 成功。 运行测试 pf ProjectsTest 成功。]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之模型测试]]></title>
    <url>%2F2019-06-20-build-a-laravel-app-with-tdd-04.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 测试用户查看一个项目的权限用户查看某个项目详情，应该可以看见标题与描述，于是我们开始编写测试方法： 123456789/** @test */public function a_user_can_view_a_project()&#123; $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects/' . $project-&gt;id) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description);&#125; 运行测试： 1pf ProjectsTest 结果如下： 404，没有找到对应的路由 为了看清错误，取消异常处理： 1234567891011/** @test */public function a_user_can_view_a_project()&#123; $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects/' . $project-&gt;id) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description);&#125; 运行测试后结果如下： NotFoundHttpException 现在我们来添加路由： 1Route::get('/projects/&#123;project&#125;', 'ProjectsController@show'); 同时编写控制器中的代码： 123456public function show()&#123; $project = Project::findOrFail(request('project')); return view('projects.show', compact('project'));&#125; 运行测试后如下： There was 1 error: 1) Tests\Feature\ProjectsTest::a_user_can_view_a_projectInvalidArgumentException: View [projects.show] not found. OK，让我们来创建并完善视图文件 resources/views/projects/show.blade.php： 1234567891011121314&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Birdboard&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&#123;&#123;$project-&gt;title&#125;&#125;&lt;/h1&gt;&lt;div&gt;&#123;&#123;$project-&gt;description&#125;&#125;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 运行测试通过！ 优化控制器代码实际上，show 方法可以用隐式路由模型绑定写得更加简洁优雅： 1234public function show(Project $project)&#123; return view('projects.show', compact('project'));&#125; 运行测试通过！ 利用单元测试进行模型测试先回顾下之前我们的测试： 1234567891011/** @test */public function a_user_can_view_a_project()&#123; $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(); $this-&gt;get('/projects/' . $project-&gt;id) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description);&#125; 查看某个项目的路由是根据id来区分的，实际开发中也可能是 uuid ，slug 等等这些来区分，或者说，我们可以在模型中写一个更加通用的路径方法来定义这个路由。 不同于功能测试，让我们为模型测试创建一个单元测试： 1php artisan make:test ProjectTest --unit 测试方法如下： 1234567891011121314151617181920&lt;?phpnamespace Tests\Unit;use Tests\TestCase;use Illuminate\Foundation\Testing\WithFaker;use Illuminate\Foundation\Testing\RefreshDatabase;class ProjectTest extends TestCase&#123; use RefreshDatabase; /** @test */ public function it_has_a_path() &#123; $project = factory('App\Project')-&gt;create(); $this-&gt;assertEquals('/projects/'. $project-&gt;id, $project-&gt;path()); &#125;&#125; 运行测试 pf ProjectTest，结果如下： There was 1 error: 1) Tests\Unit\ProjectTest::it_has_a_pathBadMethodCallException: Call to undefined method App\Project::path() 这是显然的，我们还没有在 Project 模型中创建 path 方法。让我们完善它： 123456789...class Project extends Model&#123; ... public function path() &#123; return '/projects/' . $this-&gt;id; &#125;&#125; 运行该单元测试通过！ 好了，那么我们可以修改 a_user_can_view_a_project 这个功能测试的路由定义方法了： 1234567891011/** @test */public function a_user_can_view_a_project()&#123; $this-&gt;withoutExceptionHandling(); $project = factory('App\Project')-&gt;create(); $this-&gt;get($project-&gt;path()) -&gt;assertSee($project-&gt;title) -&gt;assertSee($project-&gt;description);&#125; 运行该功能测试通过！ 完善视图让我们为项目列表添加链接： 123456&lt;h1&gt;Birdboard&lt;/h1&gt;@foreach($projects as $project)&lt;li&gt; &lt;a href=&quot;&#123;&#123; $project-&gt;path() &#125;&#125;&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/a&gt;&lt;/li&gt;@endforeach 打开 http://birdboard.test/projects，发现报错： Illuminate \ Database \ QueryException (42S02)SQLSTATE[42S02]: Base table or view not found: 1146 Unknown error 1146 (SQL: select * from projects) OK，是因为我们没有进行数据库迁移。运行： 1php artisan migrate 刷新 http://birdboard.test/projects 我们可以看见页面了，但是没有任何数据。 让我们修改列表循环，以便更清晰友好的显示： 12345678&lt;h1&gt;Birdboard&lt;/h1&gt;@forelse($projects as $project)&lt;li&gt; &lt;a href=&quot;&#123;&#123; $project-&gt;path() &#125;&#125;&quot;&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/a&gt;&lt;/li&gt;@empty&lt;li&gt;No project yet.&lt;/li&gt;@endforelse 刷新链接，应该能看见 No project yet. 让我们进入 tinker 模拟些数据： 1php artisan tinker 进入之后，输入： 1factory('App\Project', 5)-&gt;create(); 刷新 http://birdboard.test/projects ，现在应该可以看见 5 条假数据了，点击项目链接，也能看见详情。]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之测试请求验证]]></title>
    <url>%2F2019-06-19-build-a-laravel-app-with-tdd-03.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 上一小节保存数据之前没有验证数据完整性，这一小节主要测试请求数据合法性。 编写一个验证 标题 的功能测试：12345/** @test */public function a_project_requires_title()&#123; $this-&gt;post('/projects', [])-&gt;assertSessionHasErrors('title');&#125; 测试该方法： 1vendor/bin/phpunit --filter a_project_requires_title 结果如下： 我们并没有在程序中做校验，失败是必然的。 编写测试别名 每次测试的命令过于冗长，可以编写别名 pf： 1alias pf="vendor/bin/phpunit --filter" 控制器中完善验证方法： 12345678public function store()&#123; request()-&gt;validate(['title' =&gt; 'required']); Project::create(request(['title', 'description'])); return redirect('/projects');&#125; 运行测试没问题！ 编写一个验证 描述 的功能测试：12345/** @test */public function a_project_requires_description()&#123; $this-&gt;post('/projects', [])-&gt;assertSessionHasErrors('description');&#125; 控制器中完善验证方法： 12345678public function store()&#123; request()-&gt;validate(['title' =&gt; 'required', 'description' =&gt; 'required']); Project::create(request(['title', 'description'])); return redirect('/projects');&#125; 运行测试没问题！ 改进验证测试之前验证字段必填只是粗略的把所有的传输数据都设为空，并没有针对特定字段设置为空。我们需要改进下。 首先创建一个模型工厂 1php artisan make:factory ProjetFactory --model="App\Project" 编写模型工厂 12345678910111213&lt;?php/* @var $factory \Illuminate\Database\Eloquent\Factory */use App\Project;use Faker\Generator as Faker;$factory-&gt;define(Project::class, function (Faker $faker) &#123; return [ 'title' =&gt; $faker-&gt;sentence, 'description' =&gt; $faker-&gt;paragraph ];&#125;); 改进测试判断 12345678910111213/** @test */public function a_project_requires_title()&#123; $attributes = factory('App\Project')-&gt;raw(['title' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('title');&#125;/** @test */public function a_project_requires_description()&#123; $attributes = factory('App\Project')-&gt;raw(['description' =&gt; '']); $this-&gt;post('/projects', $attributes)-&gt;assertSessionHasErrors('description');&#125; 现在我们的方法只是针对特定字段的判断了。 测试整个文件： 1pf ProjectsTest 运行测试没问题！ 需要注意的是 factory(&#39;App\Project&#39;)-&gt;raw([&#39;title&#39; =&gt; &#39;&#39;]) 中的 raw 方法生成的数据是以数组的形式组织的。]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之从测试开始]]></title>
    <url>%2F2019-06-19-build-a-laravel-app-with-tdd-02.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 开始 Project 的功能测试 生成功能测试文件： 1php artisan make:test ProjectsTest 在 tests\Feature目录中可以找到该文件 开始第一个功能测试：用户创建项目 1234567891011121314151617181920212223242526&lt;?phpnamespace Tests\Feature;use Tests\TestCase;use Illuminate\Foundation\Testing\WithFaker;use Illuminate\Foundation\Testing\RefreshDatabase;class ProjectsTest extends TestCase&#123; use WithFaker, RefreshDatabase; //生成假数据, 每次测试后重置数据库 /** @test */ public function a_user_can_create_a_project() &#123; $this-&gt;withoutExceptionHandling(); $attributes = [ 'title' =&gt; $this-&gt;faker-&gt;sentence, 'description' =&gt; $this-&gt;faker-&gt;paragraph ]; $this-&gt;post('/projects', $attributes); // 断言数据库中的数据是否和给定数据集合匹配 $this-&gt;assertDatabaseHas('projects', $attributes); &#125;&#125; 运行测试： 1vendor/bin/phpunit tests/Feature/ProjectsTest.php 结果如下： 显然失败了，数据库设置并不正确 使用 SQLite 作为测试数据库我们使用 sqlite 作为我们测试的数据库，在 phpunit.xml中修改如下： 12345678910&lt;php&gt; &lt;server name="APP_ENV" value="testing"/&gt; &lt;server name="BCRYPT_ROUNDS" value="4"/&gt; &lt;server name="CACHE_DRIVER" value="array"/&gt; &lt;server name="MAIL_DRIVER" value="array"/&gt; &lt;server name="QUEUE_CONNECTION" value="sync"/&gt; &lt;server name="SESSION_DRIVER" value="array"/&gt; &lt;server name="DB_CONNECTION" value="sqlite"/&gt; &lt;server name="DB_DATABASE" value=":memory:"/&gt;&lt;/php&gt; 运行测试： 1vendor/bin/phpunit tests/Feature/ProjectsTest.php 结果如下： 找不到对应的 projects 表 创建项目表 创建对应的迁移文件 1php artisan make:migration create_projects_table 完善表结构 123456Schema::create('projects', function (Blueprint $table) &#123; $table-&gt;bigIncrements('id'); $table-&gt;string('title'); $table-&gt;text('description'); $table-&gt;timestamps();&#125;); 创建对应的模型文件 1php artisan make:model Project 在 App\Project 中设置字段黑名单 12345678910&lt;?phpnamespace App;use Illuminate\Database\Eloquent\Model;class Project extends Model&#123; protected $guarded = [];&#125; 设置路由 123Route::post('/projects', function () &#123; App\Project::create(request(['title', 'description']));&#125;); 运行测试： 1vendor/bin/phpunit tests/Feature/ProjectsTest.php 结果如下： 项目列表功能测试 编写断言 1234567891011...class ProjectsTest extends TestCase&#123; ... /** @test */ public function a_user_can_create_a_project() &#123; ... $this-&gt;get('/projects')-&gt;assertSee($attributes['title']); &#125;&#125; 添加路由 1234Route::get('/projects', function () &#123; $projects = App\Project::all(); return view('projects.index', compact('projects'));&#125;); 添加视图 12345678910111213141516&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Birdboard&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Birdboard&lt;/h1&gt; @foreach($projects as $project) &lt;li&gt;&#123;&#123; $project-&gt;title &#125;&#125;&lt;/li&gt; @endforeach&lt;/body&gt;&lt;/html&gt; 运行测试： 1vendor/bin/phpunit tests/Feature/ProjectsTest.php 结果OK！ 完善功能 现在可以创建控制器了： 1php artisan make:controller ProjectsController 在控制器中编写对应方法： 1234567891011121314151617181920&lt;?phpnamespace App\Http\Controllers;use App\Project;use Illuminate\Http\Request;class ProjectsController extends Controller&#123; public function index() &#123; $projects = Project::all(); return view('projects.index', compact('projects')); &#125; public function store() &#123; Project::create(request(['title', 'description'])); &#125;&#125; 重构路由： 123Route::get('/projects', 'ProjectsController@index');Route::post('/projects', 'ProjectsController@store'); 运行测试没问题！ 增加跳转 实际项目中，保存完数据一般都会进行跳转： 123456789101112131415161718...class ProjectsTest extends TestCase&#123; ... /** @test */ public function a_user_can_create_a_project() &#123; ... $this-&gt;post('/projects', $attributes)-&gt;assertRedirect('/projects'); // 断言数据库中的数据是否和给定数据集合匹配 $this-&gt;assertDatabaseHas('projects', $attributes); $this-&gt;get('/projects')-&gt;assertSee($attributes['title']); &#125;&#125; 修改控制器： 1234567891011...class ProjectsController extends Controller&#123; ... public function store() &#123; Project::create(request(['title', 'description'])); return redirect('/projects'); &#125;&#125; 运行测试没问题！]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD 构建 Laravel 应用之遇见 Birdboard]]></title>
    <url>%2F2019-06-14-build-a-laravel-app-with-tdd-01.html</url>
    <content type="text"><![CDATA[本系列文章为 laracasts.com 的系列视频教程 ——Build A Laravel App With TDD 的学习笔记，若喜欢该系列视频，可去该网站订阅后下载该系列视频， 支持正版 。 开发环境 Mac 推荐 Valet Windows 推荐 Laragon 创建应用1laravel new birdboard 此时打开 birdboard.test ，显示页面： 加入版本库123git initgit add .git commit -m "安装框架"]]></content>
      <categories>
        <category>TDD 构建 Laravel 应用</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>TDD 构建 Laravel 应用</tag>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.7 新特性之DumpServer]]></title>
    <url>%2F2019-06-13-Laravel_5_7_Dump_Server.html</url>
    <content type="text"><![CDATA[相关依赖在 composer.json 文件的 require-dev 中有关于 dumper-server 的依赖： 1"beyondcode/laravel-dump-server": "^1.0", 如何使用在路由 web.php 中写一个测试路由： 1234Route::get('/hello', function () &#123; dump(request()-&gt;all()); return 'Hello';&#125;); 打开 url http://xxx.test/hello?name=aaa，页面中只显示 Hello 字符串。需要执行： 1php artisan dump-server 进入控制台收集 dump 信息。 与 dd 函数相比的优势dd 函数是 dump and die，程序直接中止执行。而 dump 不影响程序的正常运行，且在控制台才能查看 dump 执行结果，更便于调试。]]></content>
      <categories>
        <category>Laravel 5.7 新特性</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.7 新特性之邮箱验证]]></title>
    <url>%2F2019-06-11-Laravel_5_7_Email_Verification.html</url>
    <content type="text"><![CDATA[使用方式 创建一个 Laravel 项目 1laravel new knowledge 修改配置 形如： 12345678DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=knowledgeDB_USERNAME=rootDB_PASSWORD=MAIL_DRIVER=log #log驱动仅为开发便利 3秒搭建用户认证 12php artisan make:authphp artisan migrate Laravel 5.7 在默认用户表中新增了 email_verified_at 字段 在 User 模型文件中实现 MustVerifyEmail 接口 1234class User extends Authenticatable implements MustVerifyEmail &#123; ...&#125; 路由web.php文件中配置邮箱验证 1Auth::routes(['verify' =&gt; true]); 利用 verified 中间件，使其用户必须邮箱验证 1234# 具体设置根据实际开发Route::get('/', function () &#123; return view('welcome');&#125;)-&gt;middleware('verified'); 注册用户后，在 log 日志中找到对应邮件，点击验证链接验证邮箱 实现原理 User 模型中实现了 MustVerifyEmail接口 在 App\Providers\EventServiceProvider.php 中有一个注册后的事件： 123Registered::class =&gt; [ SendEmailVerificationNotification::class,], 打开 SendEmailVerificationNotification.php 123456public function handle(Registered $event)&#123; if ($event-&gt;user instanceof MustVerifyEmail &amp;&amp; ! $event-&gt;user-&gt;hasVerifiedEmail()) &#123; $event-&gt;user-&gt;sendEmailVerificationNotification(); &#125;&#125;]]></content>
      <categories>
        <category>Laravel 5.7 新特性</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始Go之常量定义]]></title>
    <url>%2F2019-06-08-Go_From_Scratch_3.html</url>
    <content type="text"><![CDATA[Go 语言中的常量不要大写，在Go语言中，首字母大小写是有含义的 普通常量定义 单个常量定义 1const logname string = "errorlog" 等同于： 1const logname = "errorlog" 多个常量赋值 1const a,b,c = "hello", false, 2 括号表示法 1234const ( log = "error.log" a, b = false, 1) 枚举类型定义12345678910111213package mainimport ( "fmt")func main() &#123; const ( up = 1 down = 0 ) fmt.Println(up, down)&#125; 输出结果： 11 0 iota 自增值1234567891011121314package mainimport ( "fmt")func main() &#123; const ( unknown = iota male female ) fmt.Println(unknown, male, female)&#125; 输出结果： 10 1 2 巧用 iota 之过滤12345678910111213141516package mainimport ( "fmt")func main() &#123; const ( java = iota _ php python golang ) fmt.Println(java, php, python, golang)&#125; 输出结果： 10 2 3 4 巧用 iota 之运算 1234567891011121314151617package mainimport ( "fmt")func main() &#123; const ( b = 1 &lt;&lt; (10 * iota) kb mb gb tb pb ) fmt.Println(b, kb, mb, gb, tb, pb)&#125; 输出结果： 11 1024 1048576 1073741824 1099511627776 1125899906842624]]></content>
      <categories>
        <category>从零开始Go</category>
      </categories>
      <tags>
        <tag>从零开始Go</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始Go之变量类型与类型转换]]></title>
    <url>%2F2019-06-08-Go_From_Scratch_2.html</url>
    <content type="text"><![CDATA[内置变量类型 类别 类型与描述 整型 uint8 无符号 8 位整型 (0 到 255) 整型 uint16 无符号 16 位整型 (0 到 65535) 整型 uint32 无符号 32 位整型 (0 到 4294967295) 整型 uint64 无符号 64 位整型 (0 到 18446744073709551615) 整型 int8 有符号 8 位整型 (-128 到 127) 整型 int16 有符号 16 位整型 (-32768 到 32767) 整型 int32 有符号 32 位整型 (-2147483648 到 2147483647) 整型 int64 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807) 整型 byte 类似 uint8 整型 rune 类似 int32 是支持utf8的char类型 整型 uint 32 或 64 位 整型 int与 uint 一样大小 整型 uintptr 无符号整型，用于存放一个指针 浮点 float32IEEE-754 32位浮点型数 浮点 float64IEEE-754 64位浮点型数 浮点 complex6432 位实数和虚数 浮点 complex12864 位实数和虚数 布尔 bool true 或 false 字符串 string 类型转换Go没有隐式转换，只能强制转换 12345678910111213package mainimport ( "fmt" "math")func main() &#123; var a, b int = 3, 4 var c int c = int(math.Sqrt( float64(a * a + b * b))) fmt.Println(c)&#125; 输出结果： 15]]></content>
      <categories>
        <category>从零开始Go</category>
      </categories>
      <tags>
        <tag>从零开始Go</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始Go之变量定义]]></title>
    <url>%2F2019-06-08-Go_From_Scratch_1.html</url>
    <content type="text"><![CDATA[Golang 在定义变量时，与大多数主流语言不同，先定义变量名，再定义变量类型。 变量默认初始值Go语言定义变量后都有一个合理的初始值 123456789package mainimport "fmt"func main() &#123; var a int var s string fmt.Printf("%d %q\n",a, s)&#125; 输出结果： 10 &quot;&quot; 变量赋初始值123456789package mainimport "fmt"func main() &#123; var a, b int = 1, 2 //定义多个变量并赋值 var s string = "你好呀" fmt.Println(a, b, s)&#125; 输出结果： 11 2 你好呀 变量省略类型定义直接赋值12345678package mainimport "fmt"func main() &#123; var a, b, c, s = 1, 2, true, "hello" //类型没定义,可以多个类型写在一起 fmt.Println(a, b, c, s)&#125; 输出结果： 11 2 true hello 函数内变量赋值最佳实践1234567891011121314package mainimport "fmt"func varSimple() &#123; //注：包内无法使用 := a, b, c, s := 1, 2, true, "hello" b = 3 // 定义后再赋值不能再用 := fmt.Println(a, b, c, s)&#125;func main() &#123; varSimple()&#125; 输出结果： 11 3 true hello 包内部变量定义Go 没有全局变量的概念 12345package mainvar a = 1var s = "hello"var b = true 包内部变量定义最佳实践1234567package mainvar ( a = 1 s = "hello" b = true)]]></content>
      <categories>
        <category>从零开始Go</category>
      </categories>
      <tags>
        <tag>从零开始Go</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot学习之日志的使用与配置]]></title>
    <url>%2F2019-06-01-SpringBoot-Log.html</url>
    <content type="text"><![CDATA[基本使用利用 SpringBoot 内置的 slf4j 最基础的使用: 1234567891011121314151617181920212223package com.lazy.sell;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class LoggerTest &#123; // getLogger 载入当前类名 private final Logger logger = LoggerFactory.getLogger(LoggerTest.class); @Test public void test1() &#123; logger.debug("debug..."); logger.info("info..."); logger.error("error..."); &#125;&#125; 利用 lombok 更加优雅的使用日志 1234567891011121314151617181920package com.lazy.sell;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest@Slf4jpublic class LoggerTest &#123; @Test public void test1() &#123; log.debug("debug..."); log.info("info..."); log.error("error..."); &#125;&#125; 日志注入变量(用 {} 表示占位符) 123456789101112131415161718192021package com.lazy.sell;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest@Slf4jpublic class LoggerTest &#123; @Test public void test1() &#123; String name = "hello"; String password = "123456"; log.info("name: &#123;&#125;, password: &#123;&#125;", name, password); &#125;&#125; Logback配置 简单配置 resources/application.yml 12345logging: pattern: console: "%d - %msg%n" # 控制台输出日志格式 file: ./sell.log # 输出的日志文件地址 level: debug # 日志级别(默认info) 复杂配置 每天分别创建 info 日志和 error 日志 删除 application.yml 中的 logging 相关配置 resources/logback-spring.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;configuration&gt; &lt;!-- 配置控制台 --&gt; &lt;appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;layout class="ch.qos.logback.classic.PatternLayout"&gt; &lt;pattern&gt; %d - %msg%n &lt;/pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- 配置文件 --&gt; &lt;appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;onMatch&gt;DENY&lt;/onMatch&gt; &lt;onMismatch&gt;ACCEPT&lt;/onMismatch&gt; &lt;/filter&gt; &lt;encoder&gt; &lt;pattern&gt; %msg%n &lt;/pattern&gt; &lt;/encoder&gt; &lt;!-- 滚动策略 --&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;!-- 路径 --&gt; &lt;fileNamePattern&gt;./info.%d.log&lt;/fileNamePattern&gt; &lt;/rollingPolicy&gt; &lt;/appender&gt; &lt;appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;!-- 根据范围来过滤 --&gt; &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;encoder&gt; &lt;pattern&gt; %msg%n &lt;/pattern&gt; &lt;/encoder&gt; &lt;!-- 滚动策略 --&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;!-- 路径 --&gt; &lt;fileNamePattern&gt;./error.%d.log&lt;/fileNamePattern&gt; &lt;/rollingPolicy&gt; &lt;/appender&gt; &lt;!-- 配置应用至整个项目 --&gt; &lt;root level="info"&gt; &lt;appender-ref ref="consoleLog" /&gt; &lt;appender-ref ref="fileInfoLog" /&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;/root&gt;&lt;/configuration&gt;]]></content>
      <categories>
        <category>SpringBoot学习之旅</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>slf4j</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次部署bug]]></title>
    <url>%2F2019-05-03-Deploy-Bug-About-htaccess.html</url>
    <content type="text"><![CDATA[利用 Capistrano 把项目成功部署到了测试服上，但是打开域名，出现问题： You don’t have permission to access / on this server. Server unable to read htaccess file, denying access to be safe 感谢万能的 Stackoverflow ， forbidden-you-dont-have-permission-to-access-on-this-server-server-unable-to 原因：deploy 目录，权限没有给足够。我给web目录755权限，但是web目录的父级目录或父父级目录 apache 没有可访问的权限，就导致了问题发生 修改了权限之后，又出现 500 内部错误，报错类似： without matching 后来机智一瞄，发现是小伙伴写的.htaccess编码有问题。encoding utf8 with bom。。。。。 把 .htaccess 改成 UTF8 就可以了。]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>403 Forbidden</tag>
        <tag>.htacess 500错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探Composer]]></title>
    <url>%2F2019-05-03-Preliminary-study-Ccomposer.html</url>
    <content type="text"><![CDATA[安装12wget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composerchmod a+x /usr/local/bin/composer 替换国内镜像1composer config -g repo.packagist composer https://packagist.laravel-china.org 基本命令installinstall 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。 1composer install 如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。 如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。 update获取依赖的最新版本，并且升级 composer.lock 文件 1composer update requirerequire 命令增加新的依赖包到当前目录的 composer.json 文件中 1composer require 依赖包 创建项目1composer create-project 依赖包名 放入的文件夹 依赖版本 搜索依赖1composer search 依赖包名 自我更新将Composer升级到最新版本 1composer self-update 参考网址：Composer 中文网]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探Capistrano自动化部署]]></title>
    <url>%2F2019-05-03-Preliminary-Exploration-of-Capistrano-Automation.html</url>
    <content type="text"><![CDATA[安装Capistrano 安装在本地，安装时需要ruby和gem。 1gem install capistrano 配置初始化项目请在项目最顶层目录下执行： 1cap install 此时会生成一个 Capfile 的文件，config 目录和 lib 目录。 123456789Capfileconfig/ deploy/ production.rb staging.rb deploy.rblib/ capistrano/ tasks/ 文件说明Capfile 是Capsitrano的中央配置文件，会聚合 config/ 目录中的配置文件。 config/ 目录存放各个远程服务器环境（测试环境、过渡环境、生产环境等）的配置文件。 config/deploy.rb 用于保存所有环境的通用配置 config/deploy.rb文件说明 1234567891011# PHP应用名称 只能数字、字母和下划线set :application, "my_app_name"# git 仓库地址set :repo_url, "git@example.com:me/my_repo.git"# 远程服务器中一个目录的绝对地址set :deploy_to, "/home/www/apps/my_app_name"# 保留多少个旧版本，以防想把应用回滚到之前的版本set :keep_releases, 5 准备远程服务器比如有个www用户专门部署网站。我们在 /home/www/apps/ 中创建 my_app_name 文件夹放置网站代码文件。在生产服务器中，Capistrano 管理的目录结构可能如下所示： 12345678910111213# 目录结构/ home/ www/ apps/ my_app_name/ current/ releases/ release1/ release2/ release3/ release4/ release5/ 虚拟主机Capistrano 会创建符号链接，把 my_app_name 文件夹里的 current/ 目录。因此，我们要将虚拟主机的根目录指向 Capistrano 的 current/ 目录。 服务器依赖远程服务器不需要安装 Capistrano，但是需要 Git。 共享目录以CI框架为例，Session、Cache、Log、Uploads等目录文件不会被Git进行版本控制，所以每一次部署的时候，这几个文件夹或文件都回被删除或者清空。这时候就需要用Cap的文件链接的功能，将这些文件或文件夹链接到共享目录中去，这样每次部署这些文件和文件夹就不会消失了。 12# deploy.rb 文件中添加如下的内容即可，不同的项目应该要作相应的改动append :linked_dirs, "application/session", "application/logs", "application/cache", "uploads" Composer如果项目中运用到了Composer进行包管理，那么项目的vendor目录也不应该版本控制，所以在每次部署完毕后需要进行Composer Install操作，前提是服务器上也配置好了Composer环境。如果发现在Composer Install操作的时候用时很长，那么请配置好Composer的国内镜像。在config/deploy目录中的配置文件中添加如下内容即可： 12345678910namespace :deploy do desc "Composer Install" after :updated, :build do on roles(:web) do within release_path do execute :composer, "install --quiet" end end endend 参考《Modern PHP（中文版）》]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>运维部署</tag>
        <tag>自动化部署</tag>
        <tag>Capistrano</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL字符集的设置utf8]]></title>
    <url>%2F2019-05-03-MySQL-character-set-set-utf8.html</url>
    <content type="text"><![CDATA[以下内容仅供参考,实际开发中多用utf8mb4 MySQL的字符集和校对集有4个级别的默认设置：服务器级、数据库级、表级和字段级。 服务器设置utf8在my.cnf中设置 12[mysqld]character-set-server=utf8 交互客户机和服务器设置utf8在my.cnf中设置： 12[mysql]default-character-set=utf8 遇见乱码怎么办?请确保客户端,服务器,客户端与服务器互动连接这三者的编码都一致.]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vagrant+VirtualBox部署开发环境]]></title>
    <url>%2F2017-04-08-vagrant-vbox-deploy-dev-env.html</url>
    <content type="text"><![CDATA[VirtualBox 版本 5.1.18Vagrant 版本 1.9.3开发系统：Mac OSX 不要被什么 Vagrant 没听过的名词给吓住了，其实部署很简单，至少比我以前直接在 VirtualBox 安装 Ubuntu 轻松多了。 下载所需软件 下载 VirtualBox 并安装。 官网：https://www.virtualbox.org/wiki/Downloads 下载 Vagrant 并安装。 官网：https://www.vagrantup.com/ VirtualBox 和 Vagrant 版本需要适配，都用官方最新的即可。直接官方下载，不要去其他莫名其妙的地方下载。 下载Box 下载地址：http://www.vagrantbox.es/我使用的是Ubuntu 16.04，并将其命名为 Ubuntu1604.box为了方便管理，在家目录下新建文件夹 vagrant/box，将下载的box放入该文件夹内。 1mkdir -p ~/vagrant/box Vagrant环境设置 添加 Box 到 Vagrant 1vagrant box add dev Ubuntu1604.box 部署一个名叫 lnmp 的开发环境，并初始化 123cd ~/vagrantmkdir dev &amp;&amp; cd devvagrant init ubuntu1604 启动 dev，并进入 12vagrant upvagrant ssh 其他 Vagrant 常用命令 12345678vagrant box add boxName box地址 # 添加boxvagrant init [name [url]] # 初始化Vagrant环境vagrant ssh # 启动 Vagrantvagrant halt # 关闭 Vagrantvagrant suspend # 挂起 Vagrant 不用时推荐使用该命令vagrant resume # 重启被挂起的 Vagrantvagrant destroy [name|id] # 销毁 Vagrantvagrant reload # 不用重启加载配置文件 具体命令见官网 https://www.vagrantup.com/docs/cli 我的 Vagrantfile 配置 具体见官网 https://www.vagrantup.com/docs/vagrantfile/machine_settings.html 总结以上只是记录了个入门，我也是刚接触Vagrant，更高阶的在日后的工作学习中慢慢探索即可。PS：遇见新技术名词无需惊慌，多多google，多看官方文档即可。]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>运维部署</tag>
        <tag>Vagrant</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04 编译安装 LNMP 环境]]></title>
    <url>%2F2017-04-07-Ubuntu-compile-and-install-LNMP.html</url>
    <content type="text"><![CDATA[个人习惯：源代码包放在 /usr/local/src 目录下，安装路径在 /usr/local下 Ubuntu是Vagrant+VirtualBox搭建 编译 Nginx 下载 Nginx 源码包，我选择的是 1.10.3 稳定版 12#目录 /usr/local/src$ wget http://nginx.org/download/nginx-1.10.3.tar.gz 解压源码包 12#目录 /usr/local/src$ tar vfzx nginx-1.10.3.tar.gz 配置安装路径 12#目录 /usr/local/src/nginx-1.10.3/$ ./configure --prefix=usr/local/nginx 此时编译报错：没有 C 编译器 ./configure: error: C compiler cc is not found 1$ sudo apt-get install build-essential 再次配置安装路径，报错：缺少 PCRE 库 ./configure: error: the HTTP rewrite module requires the PCRE library. 下载 pcre 库源码并解压 123#目录 /usr/local/src/$ wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz$ tar vfxz pcre-8.40.tar.gz 再次配置安装路径 123#目录 /usr/local/src/nginx-1.10.3/$ ./configure --prefix=/usr/local/nginx --with-pcre=/usr/local/src/pcre-8.40 报错：缺少 zlib 库./configure: error: the HTTP gzip module requires the zlib library. 如上方法，下载 zlib 源码并解压 123#目录 /usr/local/src/$ wget http://www.zlib.net/zlib-1.2.11.tar.gz$ tar vfzx zlib-1.2.11.tar.gz 再次配置安装路径 1234#目录 /usr/local/src/nginx-1.10.3/$ ./configure --prefix=/usr/local/nginx \--with-pcre=/usr/local/src/pcre-8.40 \--with-zlib=/usr/local/src/zlib-1.2.11 此时成功了 o(￣▽￣)d 别忘了最后一步 1make &amp;&amp; make install 启动 nginx 1$ /user/local/nginx/sbin/nginx 我设置的该本地服务器的 IP 为 192.168.33.250 nginx 启动后，在chrome查看80端口，出现该页面，说明我已经成功安装nginx了o(￣▽￣)d 编译PHP 下载源码包，我选择的是最新稳定版 7.1.4 123# 目录 /usr/local/src/$ wget http://cn2.php.net/get/php-7.1.4.tar.gz/from/this/mirror$ mv mirror php-7.1.4.tar.gz 解压源码包 12# 目录 /usr/local/src/$ tar vfxz php-7.1.4.tar.gz 配置安装路径 12345678910# 目录 /usr/local/src/php-7.1.4$ ./configure --prefix=/usr/local/php \&gt; --with-gd \&gt; --enable-gd-native-ttf \&gt; --enable-gd-jis-conv \&gt; --enable-mysqlnd \&gt; --with-pdo-mysql=mysqlnd \&gt; --with-openssl \&gt; --enable-mbstring \&gt; --enable-fpm 报错：缺少xml2-config，需要安装libxml2 configure: error: xml2-config not found. Please check your libxml2 installation. 12# 安装libxml2和libxml2-dev$ apt-get install libxml2 libxml2-dev 继续配置安装路径，报错：缺少openssl configure: error: Cannot find OpenSSL’s &lt;evp.h&gt; 12# 安装openssl和libssl-dev Ubuntu上没有openssl-develb包$ apt-get install openssl libssl-dev 继续配置安装路径，报错： configure: error: Cannot find OpenSSL’s libraries 解决方案：http://stackoverflow.com/questions/39919283/configure-error-cannot-find-openssls-libraries-ubuntu-16-04 1$ apt-get install pkg-config libssl-dev openssl 继续配置安装路径，缺少gd库，但是我找了下，并没有php7.1-gd这个库，退而且其次，安装了jpeg和png的库 configure: error: png.h not found. 1$ apt-get install libjpeg-dev libpng-dev 继续配置安装路径，这一次终于成功了😄 编译PHP 12# 目录 /usr/local/src/php-7.1.4$ make &amp;&amp; make install 几个PHP相关的配置文件 1234# 目录 /usr/local/php$ cp etc/php-fpm.conf.default etc/php-fpm.conf# 目录 /usr/local/src/php-7.1.4$ cp php.ini-development /usr/local/php/etc/php.ini Nginx和PHP整合 修改 Nginx 配置文件 12345678# 位置 /usr/local/nginx/conf/nginx.conflocation ~ \.php$ &#123; root /var/wwwroot/test.com/; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $DOCUMENT_ROOT$fastcgi_script_name; include fastcgi_params;&#125; 配置文件里这些都给你写了，其实只要把注释去掉即可。 然后优雅的重启下Nginx 和 php-fpm 1234# 目录 /usr/local/nginx$ ./sbin/nginx -s reload# 目录 /usr/local/php$ ./sbin/php-fpm 报错：WARNING: Nothing matches the include pattern ‘/usr/local/php/etc/php-fpm.d/*.conf’ from /usr/local/php/etc/php-fpm.conf at line 125. 很简单，在/usr/local/php/etc/php-fpm.d/ 目录下，把 www.conf.default 重命名或复制份，以 conf 为后缀即可 然后再启动php-fpm。 ok~ 编译MySQL 新增mysql 用户组和用户 12groupadd mysqluseradd -g mysql mysql 下载源码 12# 目录 /usr/local/src/$ wget http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.10.tar.gz 安装说明文档 https://dev.mysql.com/doc/refman/5.7/en/installing-source-distribution.html 123456789101112131415161718192021222324# Preconfiguration setupshell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysql# Beginning of source-build specific instructionsshell&gt; tar zxvf mysql-VERSION.tar.gzshell&gt; cd mysql-VERSIONshell&gt; mkdir bldshell&gt; cd bldshell&gt; cmake ..shell&gt; makeshell&gt; make install# End of source-build specific instructions# Postinstallation setupshell&gt; cd /usr/local/mysqlshell&gt; chown -R mysql .shell&gt; chgrp -R mysql .shell&gt; bin/mysql_install_db --user=mysql # Before MySQL 5.7.6shell&gt; bin/mysqld --initialize --user=mysql # MySQL 5.7.6 and upshell&gt; bin/mysql_ssl_rsa_setup # MySQL 5.7.6 and upshell&gt; chown -R root .shell&gt; chown -R mysql datashell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server 1cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8_general_ci -DMYSQL_TCP_PORT=3306 -DMYSQL_USER=mysql -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>运维部署</tag>
        <tag>LNMP</tag>
        <tag>编译安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL索引设计原则]]></title>
    <url>%2F2017-03-29-MySQL-index-design-principles.html</url>
    <content type="text"><![CDATA[索引是数据库中用来提高性能的最常用的工具,对相关列使用索引是提高SELECT 操作性能的最佳途径. 创建与删除索引1CREATE [UNIQUE|FULLTEXT|SPATOAL] INDEX 索引名 1DROP INDEX 索引名 ON 表名 设计原则 搜索的索引列，最适合做索引的列是 WHERE 子句中的列，或连接子句中指定的列。 使用唯一索引。索引列的基数越大，效果越好。比如性别列，只有男、女，没什么意义。相对而言，出生日期列用唯一索引就好的多。 使用短索引。对字符串进行索引，应该指定一个前缀长度。比如CHAR(200)的列，如果在前10个或20个字符内，多数数值唯一，那么可使用短索引。 利用最左前缀。 不要过度索引。索引会占用额外的磁盘空间，降低写操作的性能。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL索引</tag>
        <tag>MySQL性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH密钥对认证实现SSH免密登录]]></title>
    <url>%2F2017-03-15-SSH-key-pair-authentication.html</url>
    <content type="text"><![CDATA[普通SSH登录方式一般非根用户登录服务器： 1ssh zhangsan@120.31.29.101 然后输入相对应的用户密码登录即可。 缺点： 不安全，极易受到暴力攻击 SSH密钥对认证方式登录 在本机创建密钥对 1ssh-keygen 输入此命令后,按照提示输入所需信息.然后再本地客户端会生成两个文件: ~/.ssh/id_rsa.pub (公钥)和 ~/.ssh/id_rsa (私钥)。 私钥保存在本地,打死也不说😂 公钥复制到服务器 1scp ~/.ssh/id_rsa.pub zhangsan@120.31.29.101: 不要遗漏最后的冒号，代表zhangsan用户的home目录 服务器创建authorized_keys文件 在 zhangsan 的home目录里，创建 .ssh 文件夹（如果不存在的话） 12mkdir ~/.sshtouch ~/.ssh/authorized_keys 将公钥添加到authorized_keys文件里 1cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 设置相应文件的权限 123chown -R zhangsan:zhangsan ~/sshchmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys 大功告成~ 参考《Modern PHP（中文版）》]]></content>
      <categories>
        <category>Linux/Mac</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>运维部署</tag>
        <tag>SSH登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高性能网站建设指南]]></title>
    <url>%2F2017-03-01-High-performance-website-construction-guide.html</url>
    <content type="text"><![CDATA[减少HTTP请求图片地图 适用场景：图片导航之类的。多个图变成一个图，利用 &lt;area&gt;&lt;area/&gt; 标签和 a 标签取代多个图片请求。 缺点： 手工方式很难完成且极易出错。 雪碧图 优于图片地图，灵活。 内联图片 使用 data:URL 模式，即 Base64模式 缺点： IE7 这些老式浏览器不支持，数据大小有限制 合并JS和CSS 理想情况下实施~目前流行模块化、组件化。 CDN 加速 添加 Expires 头 压缩组件 将样式表放在顶部 将 JS 放在底部 避免 CSS 表达式 使用外部 JavaScript 和 CSS 减少 DNS 查找 通过使用 Keep-Alive 和较少的域名来减少 DNS 查找 对 JS 代码进行压缩精简 避免重定向 状态码 303-307 是在 HTTP 1.1 中增加的，用来澄清对 302 的滥用。 ** 重定向之外的其他选择 ** 缺少结尾斜线当缺少URL结尾斜线时不会发生重定向 Alias、mod_rewrite和DirectorySlash 移除重复脚本 配置ETag 使用Ajax可缓存]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>Web开发</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP手册阅读笔记(三)]]></title>
    <url>%2F2017-02-17-PHP-Manual-reading-notes-3.html</url>
    <content type="text"><![CDATA[递增递减每次碰见形如 $a++ 或 ++$a都没有什么底气,应该早点看手册的,上面写的清清楚楚. 例子 名称 效果 ++$a 前加 $a 的值加一,然后返回$a $a++ 后加 返回$a,然后将$a 的值加一 –$a 前减 $a 的值减一,然后返回$a $a– 后减 返回$a,然后将$a的值减一 有趣的🌰1234$a = "9D9";var_dump(++$a); //9E0$a = "9E0";var_dump(++$a); //float(10) 9E10=&gt;9e0=&gt;9*10^0 = 9 字符串运算符. 相关🌰123$var = 3;echo "Result: " . $var + 3; // + 号之前的强制转换成0echo "Result: " . ($var + 3); //6]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP手册阅读笔记(二)]]></title>
    <url>%2F2017-01-18-PHP-Manual-reading-notes-2.html</url>
    <content type="text"><![CDATA[布尔FALSE 布尔值 FALSE 本身 整型值 0（零） 浮点型值 0.0（零） 空字符串，以及字符串 “0” 不包括任何元素的数组 不包括任何成员变量的对象（仅 PHP 4.0 适用） 特殊类型 NULL（包括尚未赋值的变量） 从空标记生成的 SimpleXML 对象 有意思的🌰1234$x = true;$y = false;$z = $x || $y;var_dump((bool)$z); //true 1var_dump(0 == 'all'); // TRUE 'all'强制转换成了 int 0 超全局变量GET获取带.参数🌰 123//?chuck.norris=nevercriesecho $_GET['chuck.norris'],'&lt;hr/&gt;'; //错误echo $_GET['chuck_norris']; //正确]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP手册阅读笔记(一)]]></title>
    <url>%2F2016-12-27-PHP-Manual-reading-notes-1.html</url>
    <content type="text"><![CDATA[PHP短标签不鼓励使用短标签 结束标签如果文件内容是纯 PHP 代码，最好在文件末尾删除 PHP 结束标记。这可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，而脚本中此时并无输出的意图。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL常用引擎比较]]></title>
    <url>%2F2016-12-23-MySQL-commonly-used-engine-comparison.html</url>
    <content type="text"><![CDATA[一表胜千言😂 特点 MyISAM InnoDB MEMORY MERGE NDB 存储限制 有 64BT 有 没有 有 事务安全 支持 锁机制 表锁 行锁 表锁 表锁 行锁 B树索引 支持 支持 支持 支持 支持 哈希索引 支持 支持 全文索引 支持 集群索引 支持 数据缓存 支持 支持 支持 索引缓存 支持 支持 支持 支持 支持 数据可压缩 支持 空间使用 低 高 N/A 低 低 内存使用 低 高 中等 低 高 批量插入的速度 高 低 高 高 高 支持外键 支持]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[替换Homebrew国内镜像源]]></title>
    <url>%2F2016-12-23-Replace-Homebrew-domestic-mirror-source.html</url>
    <content type="text"><![CDATA[原文出处: phpdragon-博客园我的配置和原文略有出入 安装与卸载1234ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"sudo rm -rf /usr/local/ 替换Homebrew默认源12cd /usr/local/Homebrew/git remote set-url origin git://mirrors.ustc.edu.cn/brew.git 替换homebrew-core默认源12cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-coregit remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git 替换homebrew bottles默认源12echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &gt;&gt; ~/.bashrcsource ~/.bashrc]]></content>
      <categories>
        <category>Linux/Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之字符型]]></title>
    <url>%2F2016-12-09-MySQL-based-on-the-character-type.html</url>
    <content type="text"><![CDATA[2016年12月31日16:01:24更新 来自《深入浅出MySQL》 CHAR 与 VARCHAR的区别 char定长，varchar变长 char 不够指定长度时用”\0”(空格)来填充,取出时,会把右侧的空格全部抹掉 实际开发中,存储的字符较少,都是用的定长,速度快 不同存储引擎下的 CHAR 与 VARCHARMyISAM建议使用定长数据列代替变长数据列 InnoDB建议使用VARCHAR来处理.对于InnoDB存储引擎来说,内部的行存储格式是不区分固定长度和可变长度(所有数据行都使用指向数据列值的头指针),本质上使用char列不一定比varchar列性能要好,主要的性能因素是数据行的存储容量.由于char占据的空间比varchar大,所以使用varchar来最小化需要处理的数据行的存储总量和磁盘I/O是比较好的. MEMORY按照目前来说,都是使用定长的数据列存储,所以无论是char还是varchar都是作为char来处理的]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之日期时间类型]]></title>
    <url>%2F2016-12-06-MySQL-based-date-and-time-type.html</url>
    <content type="text"><![CDATA[一图胜千言( ¯•ω•¯ ) TIMESTAMP 这个类型在实际开发中一般不怎么用到呢~一般都是用 INT UNSIGNED 来表示时间戳。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之数值类型]]></title>
    <url>%2F2016-12-05-MySQL-based-on-the-value-type.html</url>
    <content type="text"><![CDATA[INT 系列 以 INT 为例，在磁盘中占据 4 个字节，如何表示在磁盘中存储 INT 类型的数值 1 ？ 00000000 00000000 00000000 00000001 一个字节有8位，4个字节就是如上表示法。 INT(M) 到底代表什么含义？ 在过去的开发中，我一直进入了一个误区，以为M就是限制输入整型长度的。比如设置注册时间，大咧咧的写上 ** register_time INT(10) UNSIGNED ** 但是在整型中，M是指当数值宽度小于M位时，数值在前面填满宽度，和 zerofill 配合使用。如果不用0填充，M参数完全可以不用写，因为此时已经没有任何意义了。 FLOAT 系列FLOAT(M,D)DOUBLE(M,D)DECIMAL(M,D) M称为精度，D称为标度M表示整数位+小数位的总位数D表示小数位的位数然而浮点数 FLOAT 和 DOUBLE 有精度损失]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之DCL]]></title>
    <url>%2F2016-12-05-MySQL-based-on-DCL.html</url>
    <content type="text"><![CDATA[赋权限1GRANT 权限1,权限2,........,权限n ON 数据库名.* TO 用户名@IP; 撤销权限1REVOKE 权限1,权限2,........,权限n on 数据库名.* FROM 用户名@IP;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之DML]]></title>
    <url>%2F2016-12-02-MySQL-based-on-DML.html</url>
    <content type="text"><![CDATA[插入记录 单条数据 1INSERT INTO tbname (field1, field2 , ... , fieldn) VALUES (value1, value2, ... , valuen); 多条数据 123456INSERT INTO tbname (field1, field2, ... , fieldn)VALUES(record1_value1, record1_value2,..., record1_valuen),(record2_value1, record2_value2,..., record2_valuen),...(recordn_value1, recordn_value2,..., recordn_valuen); ** 该特性可以使得 MySQL 在插入大量记录时，节省了很多的网络开销，大大提高插入效率。 ** 更新记录 单表更新 1UPDATE tbname SET field1 = value1, field2 = value2,..., fieldn = valuen [WHERE CONDITION]; 多表更新 1UPDATE t1,t2,...,tn SET t1.field1=expr1,tn.fieldn=exprn [WHERE CONDITION]; ** 多表更新更多用在根据一个表的字段动态地更新另一个表的字段。 ** 删除记录 单表数据 1DELETE FROM tbname [WHERE CONDITION] 多表数据 1DELETE FROM t1,t2,...,tn FROM t1,t2,...,tn [WHERE CONDITION] 查询记录 基本语法 1SELECT * FROM tbname [WHERE CONDITION] 查询不重复的记录 1SELECT DISTINCT filedname FROM tbname; 排序 1SELECT * FROM tbname [WHERE CONDITION] [ORDER BY field1 [DESC|ASC],field2 [DESC|ASC],...,fieldn [DESC|ASC]] 限制 1SELECT .... [LIMIT offset_start,row_count] 聚合 123456SELECT [field1,field2,...,fieldn] fun_nameFROM tbname[WHERE CONDITION][GROUP BY field1,field2,...,fieldn[WITH ROLLUP]][HAVING where_condition] WITH ROLLUP 是可选语法，表示是否对分类集合后的结果再进行汇总 表连接INNOR JOIN, LEFT JOIN, RIGHT JOIN 子查询关键词：in、not in、=、！=、exists、not exists等 联合查询 123456SELECT * FROM t1UNION|UNION ALLSELECT * FROM t2...UNION|UNION ALLSELECT * FROM tn]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础之DDL]]></title>
    <url>%2F2016-12-01-MySQL-based-on-DDL.html</url>
    <content type="text"><![CDATA[库操作显示数据库1SHOW DATABASES; 创建数据库1CREATE DATABASE dbname; 选择数据库1USE dbname; 删除数据库1DROP DATABASE dbname; 表操作显示库下面的表1SHOW TABLES; 创建表123456CREATE TABLE tname ( 列名称1 列类型 [列参数] [not null default ], ....列2... .... 列名称N 列类型 [列参数] [not null default ])ENGINE MyISAM/InnoDB CHASET utf8/gbk; 查看表定义1DESC tbname; 查看创建表的SQL语句1SHOW CREATE TABLE tbname \G; ** \G可以更好的显示较长的内容 ** 删除表1DROP TABLE tbname; 修改表 修改表类型 1ALTER TABLE tbname MODIFY [COLUMN] column_definition [FIRST|AFTER col_name]; 增加表字段 1ALTER TABLE tbname ADD [COLUMN] column_definition [FIRST|AFTER col_name]; 删除表字段 1ALTER TABLE tbname DROP [COLUMN] col_name; 修改字段名 1ALTER TABLE tbname CHANGE [COLUMN] old_col_name column_definition [FIRST|AFTER col_name]; CHANGE 和 MODIFY 都可以修改表的定义，CHANGE 后面需要写两次列名，但是可以修改列名称，MODIFY 则不能。CHANGE/FIRST|AFTER COLUMN 这些关键词都属于 MySQL 在标准 SQL 上的扩展，在其他数据库上不一定适用。 修改表名1ALTER TABLE tbname RENAME [TO] new_tbname;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重新学习Git]]></title>
    <url>%2F2016-11-22-Relearning_Git.html</url>
    <content type="text"><![CDATA[帐号初始化12git config --global user.name "yourname"git config --global user.email "youremail" 创建版本库创建新仓库1git init 克隆远程仓库1git clone url 查看仓库状态1git status 添加与提交文件添加到暂存区1git add test.txt 文件全部提交到暂存区1git add . 文件提交到本地版本库1git commit -m "This is common" 查看提交历史1git log 远程推送没有克隆现有仓库1git remote add origin url 远程推送1git push origin &lt;branch&gt; 查看文件差异查看文件差异之工作区VS暂存区1git diff 文件名 查看文件差异之暂存区VS版本库1git diff --cached 文件名 查看文件差异之工作区VS版本库1git diff 分支名 文件名 显示摘要1git diff --stat 修改，移动文件的名称或目录的名称1git mv oldfilename newfilename 删除文件1git rm filename 暂存区/版本库拉取到工作区1git checkout -- filename 分支 创建新分支并切换1git checkout -b feature_x 删除分支1git branch -d feature_x]]></content>
      <categories>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
